# coding: utf-8

"""
    AITRIOS | Console

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aitrios_console_rest_client_sdk_primitive import schemas  # noqa: F401


class DeployHistory(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "current_target",
            "deploy_status",
            "deploy_type",
            "ins_date",
            "upd_id",
            "replace_network_id",
            "config_id",
            "upd_date",
            "model",
            "id",
            "ins_id",
            "custom_setting",
            "firmware",
        }
        
        class properties:
            id = schemas.IntSchema
            deploy_type = schemas.StrSchema
            deploy_status = schemas.StrSchema
            replace_network_id = schemas.StrSchema
            current_target = schemas.StrSchema
            
            
            class firmware(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        sensor_loader_target_flg = schemas.StrSchema
                        sensor_loader_status = schemas.StrSchema
                        sensor_loader_retry_count = schemas.IntSchema
                        sensor_loader_start_date = schemas.StrSchema
                        sensor_loader_end_date = schemas.StrSchema
                        sensor_loader_version_number = schemas.StrSchema
                        sensor_loader_version_comment = schemas.StrSchema
                        sensor_target_flg = schemas.StrSchema
                        sensor_status = schemas.StrSchema
                        sensor_retry_count = schemas.IntSchema
                        sensor_start_date = schemas.StrSchema
                        sensor_end_date = schemas.StrSchema
                        sensor_version_number = schemas.StrSchema
                        sensor_version_comment = schemas.StrSchema
                        apfw_target_flg = schemas.StrSchema
                        apfw_status = schemas.StrSchema
                        apfw_retry_count = schemas.IntSchema
                        apfw_start_date = schemas.StrSchema
                        apfw_end_date = schemas.StrSchema
                        apfw_version_number = schemas.StrSchema
                        apfw_version_comment = schemas.StrSchema
                        __annotations__ = {
                            "sensor_loader_target_flg": sensor_loader_target_flg,
                            "sensor_loader_status": sensor_loader_status,
                            "sensor_loader_retry_count": sensor_loader_retry_count,
                            "sensor_loader_start_date": sensor_loader_start_date,
                            "sensor_loader_end_date": sensor_loader_end_date,
                            "sensor_loader_version_number": sensor_loader_version_number,
                            "sensor_loader_version_comment": sensor_loader_version_comment,
                            "sensor_target_flg": sensor_target_flg,
                            "sensor_status": sensor_status,
                            "sensor_retry_count": sensor_retry_count,
                            "sensor_start_date": sensor_start_date,
                            "sensor_end_date": sensor_end_date,
                            "sensor_version_number": sensor_version_number,
                            "sensor_version_comment": sensor_version_comment,
                            "apfw_target_flg": apfw_target_flg,
                            "apfw_status": apfw_status,
                            "apfw_retry_count": apfw_retry_count,
                            "apfw_start_date": apfw_start_date,
                            "apfw_end_date": apfw_end_date,
                            "apfw_version_number": apfw_version_number,
                            "apfw_version_comment": apfw_version_comment,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_loader_target_flg"]) -> MetaOapg.properties.sensor_loader_target_flg: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_loader_status"]) -> MetaOapg.properties.sensor_loader_status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_loader_retry_count"]) -> MetaOapg.properties.sensor_loader_retry_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_loader_start_date"]) -> MetaOapg.properties.sensor_loader_start_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_loader_end_date"]) -> MetaOapg.properties.sensor_loader_end_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_loader_version_number"]) -> MetaOapg.properties.sensor_loader_version_number: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_loader_version_comment"]) -> MetaOapg.properties.sensor_loader_version_comment: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_target_flg"]) -> MetaOapg.properties.sensor_target_flg: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_status"]) -> MetaOapg.properties.sensor_status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_retry_count"]) -> MetaOapg.properties.sensor_retry_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_start_date"]) -> MetaOapg.properties.sensor_start_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_end_date"]) -> MetaOapg.properties.sensor_end_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_version_number"]) -> MetaOapg.properties.sensor_version_number: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_version_comment"]) -> MetaOapg.properties.sensor_version_comment: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["apfw_target_flg"]) -> MetaOapg.properties.apfw_target_flg: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["apfw_status"]) -> MetaOapg.properties.apfw_status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["apfw_retry_count"]) -> MetaOapg.properties.apfw_retry_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["apfw_start_date"]) -> MetaOapg.properties.apfw_start_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["apfw_end_date"]) -> MetaOapg.properties.apfw_end_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["apfw_version_number"]) -> MetaOapg.properties.apfw_version_number: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["apfw_version_comment"]) -> MetaOapg.properties.apfw_version_comment: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["sensor_loader_target_flg", "sensor_loader_status", "sensor_loader_retry_count", "sensor_loader_start_date", "sensor_loader_end_date", "sensor_loader_version_number", "sensor_loader_version_comment", "sensor_target_flg", "sensor_status", "sensor_retry_count", "sensor_start_date", "sensor_end_date", "sensor_version_number", "sensor_version_comment", "apfw_target_flg", "apfw_status", "apfw_retry_count", "apfw_start_date", "apfw_end_date", "apfw_version_number", "apfw_version_comment", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_loader_target_flg"]) -> typing.Union[MetaOapg.properties.sensor_loader_target_flg, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_loader_status"]) -> typing.Union[MetaOapg.properties.sensor_loader_status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_loader_retry_count"]) -> typing.Union[MetaOapg.properties.sensor_loader_retry_count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_loader_start_date"]) -> typing.Union[MetaOapg.properties.sensor_loader_start_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_loader_end_date"]) -> typing.Union[MetaOapg.properties.sensor_loader_end_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_loader_version_number"]) -> typing.Union[MetaOapg.properties.sensor_loader_version_number, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_loader_version_comment"]) -> typing.Union[MetaOapg.properties.sensor_loader_version_comment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_target_flg"]) -> typing.Union[MetaOapg.properties.sensor_target_flg, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_status"]) -> typing.Union[MetaOapg.properties.sensor_status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_retry_count"]) -> typing.Union[MetaOapg.properties.sensor_retry_count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_start_date"]) -> typing.Union[MetaOapg.properties.sensor_start_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_end_date"]) -> typing.Union[MetaOapg.properties.sensor_end_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_version_number"]) -> typing.Union[MetaOapg.properties.sensor_version_number, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_version_comment"]) -> typing.Union[MetaOapg.properties.sensor_version_comment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["apfw_target_flg"]) -> typing.Union[MetaOapg.properties.apfw_target_flg, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["apfw_status"]) -> typing.Union[MetaOapg.properties.apfw_status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["apfw_retry_count"]) -> typing.Union[MetaOapg.properties.apfw_retry_count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["apfw_start_date"]) -> typing.Union[MetaOapg.properties.apfw_start_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["apfw_end_date"]) -> typing.Union[MetaOapg.properties.apfw_end_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["apfw_version_number"]) -> typing.Union[MetaOapg.properties.apfw_version_number, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["apfw_version_comment"]) -> typing.Union[MetaOapg.properties.apfw_version_comment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sensor_loader_target_flg", "sensor_loader_status", "sensor_loader_retry_count", "sensor_loader_start_date", "sensor_loader_end_date", "sensor_loader_version_number", "sensor_loader_version_comment", "sensor_target_flg", "sensor_status", "sensor_retry_count", "sensor_start_date", "sensor_end_date", "sensor_version_number", "sensor_version_comment", "apfw_target_flg", "apfw_status", "apfw_retry_count", "apfw_start_date", "apfw_end_date", "apfw_version_number", "apfw_version_comment", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    sensor_loader_target_flg: typing.Union[MetaOapg.properties.sensor_loader_target_flg, str, schemas.Unset] = schemas.unset,
                    sensor_loader_status: typing.Union[MetaOapg.properties.sensor_loader_status, str, schemas.Unset] = schemas.unset,
                    sensor_loader_retry_count: typing.Union[MetaOapg.properties.sensor_loader_retry_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    sensor_loader_start_date: typing.Union[MetaOapg.properties.sensor_loader_start_date, str, schemas.Unset] = schemas.unset,
                    sensor_loader_end_date: typing.Union[MetaOapg.properties.sensor_loader_end_date, str, schemas.Unset] = schemas.unset,
                    sensor_loader_version_number: typing.Union[MetaOapg.properties.sensor_loader_version_number, str, schemas.Unset] = schemas.unset,
                    sensor_loader_version_comment: typing.Union[MetaOapg.properties.sensor_loader_version_comment, str, schemas.Unset] = schemas.unset,
                    sensor_target_flg: typing.Union[MetaOapg.properties.sensor_target_flg, str, schemas.Unset] = schemas.unset,
                    sensor_status: typing.Union[MetaOapg.properties.sensor_status, str, schemas.Unset] = schemas.unset,
                    sensor_retry_count: typing.Union[MetaOapg.properties.sensor_retry_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    sensor_start_date: typing.Union[MetaOapg.properties.sensor_start_date, str, schemas.Unset] = schemas.unset,
                    sensor_end_date: typing.Union[MetaOapg.properties.sensor_end_date, str, schemas.Unset] = schemas.unset,
                    sensor_version_number: typing.Union[MetaOapg.properties.sensor_version_number, str, schemas.Unset] = schemas.unset,
                    sensor_version_comment: typing.Union[MetaOapg.properties.sensor_version_comment, str, schemas.Unset] = schemas.unset,
                    apfw_target_flg: typing.Union[MetaOapg.properties.apfw_target_flg, str, schemas.Unset] = schemas.unset,
                    apfw_status: typing.Union[MetaOapg.properties.apfw_status, str, schemas.Unset] = schemas.unset,
                    apfw_retry_count: typing.Union[MetaOapg.properties.apfw_retry_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    apfw_start_date: typing.Union[MetaOapg.properties.apfw_start_date, str, schemas.Unset] = schemas.unset,
                    apfw_end_date: typing.Union[MetaOapg.properties.apfw_end_date, str, schemas.Unset] = schemas.unset,
                    apfw_version_number: typing.Union[MetaOapg.properties.apfw_version_number, str, schemas.Unset] = schemas.unset,
                    apfw_version_comment: typing.Union[MetaOapg.properties.apfw_version_comment, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'firmware':
                    return super().__new__(
                        cls,
                        *args,
                        sensor_loader_target_flg=sensor_loader_target_flg,
                        sensor_loader_status=sensor_loader_status,
                        sensor_loader_retry_count=sensor_loader_retry_count,
                        sensor_loader_start_date=sensor_loader_start_date,
                        sensor_loader_end_date=sensor_loader_end_date,
                        sensor_loader_version_number=sensor_loader_version_number,
                        sensor_loader_version_comment=sensor_loader_version_comment,
                        sensor_target_flg=sensor_target_flg,
                        sensor_status=sensor_status,
                        sensor_retry_count=sensor_retry_count,
                        sensor_start_date=sensor_start_date,
                        sensor_end_date=sensor_end_date,
                        sensor_version_number=sensor_version_number,
                        sensor_version_comment=sensor_version_comment,
                        apfw_target_flg=apfw_target_flg,
                        apfw_status=apfw_status,
                        apfw_retry_count=apfw_retry_count,
                        apfw_start_date=apfw_start_date,
                        apfw_end_date=apfw_end_date,
                        apfw_version_number=apfw_version_number,
                        apfw_version_comment=apfw_version_comment,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class model(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        model_target_flg = schemas.StrSchema
                        model_status = schemas.StrSchema
                        model_retry_count = schemas.IntSchema
                        model_start_date = schemas.StrSchema
                        model_end_date = schemas.StrSchema
                        model_id = schemas.StrSchema
                        model_version_number = schemas.StrSchema
                        model_comment = schemas.StrSchema
                        model_version_comment = schemas.StrSchema
                        dnn_param_setting_target_flg = schemas.StrSchema
                        dnn_param_setting_status = schemas.StrSchema
                        dnn_param_setting_retry_count = schemas.IntSchema
                        dnn_param_setting_start_date = schemas.StrSchema
                        dnn_param_setting_end_date_ = schemas.StrSchema
                        __annotations__ = {
                            "model_target_flg": model_target_flg,
                            "model_status": model_status,
                            "model_retry_count": model_retry_count,
                            "model_start_date": model_start_date,
                            "model_end_date": model_end_date,
                            "model_id": model_id,
                            "model_version_number": model_version_number,
                            "model_comment": model_comment,
                            "model_version_comment": model_version_comment,
                            "dnn_param_setting_target_flg": dnn_param_setting_target_flg,
                            "dnn_param_setting_status": dnn_param_setting_status,
                            "dnn_param_setting_retry_count": dnn_param_setting_retry_count,
                            "dnn_param_setting_start_date": dnn_param_setting_start_date,
                            "dnn_param_setting_end_date\"": dnn_param_setting_end_date_,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["model_target_flg"]) -> MetaOapg.properties.model_target_flg: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["model_status"]) -> MetaOapg.properties.model_status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["model_retry_count"]) -> MetaOapg.properties.model_retry_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["model_start_date"]) -> MetaOapg.properties.model_start_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["model_end_date"]) -> MetaOapg.properties.model_end_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["model_id"]) -> MetaOapg.properties.model_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["model_version_number"]) -> MetaOapg.properties.model_version_number: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["model_comment"]) -> MetaOapg.properties.model_comment: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["model_version_comment"]) -> MetaOapg.properties.model_version_comment: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dnn_param_setting_target_flg"]) -> MetaOapg.properties.dnn_param_setting_target_flg: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dnn_param_setting_status"]) -> MetaOapg.properties.dnn_param_setting_status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dnn_param_setting_retry_count"]) -> MetaOapg.properties.dnn_param_setting_retry_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dnn_param_setting_start_date"]) -> MetaOapg.properties.dnn_param_setting_start_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dnn_param_setting_end_date\""]) -> MetaOapg.properties.dnn_param_setting_end_date_: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["model_target_flg", "model_status", "model_retry_count", "model_start_date", "model_end_date", "model_id", "model_version_number", "model_comment", "model_version_comment", "dnn_param_setting_target_flg", "dnn_param_setting_status", "dnn_param_setting_retry_count", "dnn_param_setting_start_date", "dnn_param_setting_end_date\"", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["model_target_flg"]) -> typing.Union[MetaOapg.properties.model_target_flg, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["model_status"]) -> typing.Union[MetaOapg.properties.model_status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["model_retry_count"]) -> typing.Union[MetaOapg.properties.model_retry_count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["model_start_date"]) -> typing.Union[MetaOapg.properties.model_start_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["model_end_date"]) -> typing.Union[MetaOapg.properties.model_end_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["model_id"]) -> typing.Union[MetaOapg.properties.model_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["model_version_number"]) -> typing.Union[MetaOapg.properties.model_version_number, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["model_comment"]) -> typing.Union[MetaOapg.properties.model_comment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["model_version_comment"]) -> typing.Union[MetaOapg.properties.model_version_comment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dnn_param_setting_target_flg"]) -> typing.Union[MetaOapg.properties.dnn_param_setting_target_flg, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dnn_param_setting_status"]) -> typing.Union[MetaOapg.properties.dnn_param_setting_status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dnn_param_setting_retry_count"]) -> typing.Union[MetaOapg.properties.dnn_param_setting_retry_count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dnn_param_setting_start_date"]) -> typing.Union[MetaOapg.properties.dnn_param_setting_start_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dnn_param_setting_end_date\""]) -> typing.Union[MetaOapg.properties.dnn_param_setting_end_date_, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["model_target_flg", "model_status", "model_retry_count", "model_start_date", "model_end_date", "model_id", "model_version_number", "model_comment", "model_version_comment", "dnn_param_setting_target_flg", "dnn_param_setting_status", "dnn_param_setting_retry_count", "dnn_param_setting_start_date", "dnn_param_setting_end_date\"", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    model_target_flg: typing.Union[MetaOapg.properties.model_target_flg, str, schemas.Unset] = schemas.unset,
                    model_status: typing.Union[MetaOapg.properties.model_status, str, schemas.Unset] = schemas.unset,
                    model_retry_count: typing.Union[MetaOapg.properties.model_retry_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    model_start_date: typing.Union[MetaOapg.properties.model_start_date, str, schemas.Unset] = schemas.unset,
                    model_end_date: typing.Union[MetaOapg.properties.model_end_date, str, schemas.Unset] = schemas.unset,
                    model_id: typing.Union[MetaOapg.properties.model_id, str, schemas.Unset] = schemas.unset,
                    model_version_number: typing.Union[MetaOapg.properties.model_version_number, str, schemas.Unset] = schemas.unset,
                    model_comment: typing.Union[MetaOapg.properties.model_comment, str, schemas.Unset] = schemas.unset,
                    model_version_comment: typing.Union[MetaOapg.properties.model_version_comment, str, schemas.Unset] = schemas.unset,
                    dnn_param_setting_target_flg: typing.Union[MetaOapg.properties.dnn_param_setting_target_flg, str, schemas.Unset] = schemas.unset,
                    dnn_param_setting_status: typing.Union[MetaOapg.properties.dnn_param_setting_status, str, schemas.Unset] = schemas.unset,
                    dnn_param_setting_retry_count: typing.Union[MetaOapg.properties.dnn_param_setting_retry_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    dnn_param_setting_start_date: typing.Union[MetaOapg.properties.dnn_param_setting_start_date, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'model':
                    return super().__new__(
                        cls,
                        *args,
                        model_target_flg=model_target_flg,
                        model_status=model_status,
                        model_retry_count=model_retry_count,
                        model_start_date=model_start_date,
                        model_end_date=model_end_date,
                        model_id=model_id,
                        model_version_number=model_version_number,
                        model_comment=model_comment,
                        model_version_comment=model_version_comment,
                        dnn_param_setting_target_flg=dnn_param_setting_target_flg,
                        dnn_param_setting_status=dnn_param_setting_status,
                        dnn_param_setting_retry_count=dnn_param_setting_retry_count,
                        dnn_param_setting_start_date=dnn_param_setting_start_date,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class custom_setting(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        color_matrix_target_flg = schemas.StrSchema
                        color_matrix_status = schemas.StrSchema
                        color_matrix_retry_count = schemas.IntSchema
                        color_matrix_start_date = schemas.StrSchema
                        color_matrix_end_date = schemas.StrSchema
                        color_matrix_mode = schemas.StrSchema
                        color_matrix_file_name = schemas.StrSchema
                        color_matrix_comment = schemas.StrSchema
                        gamma_target_flg = schemas.StrSchema
                        gamma_status = schemas.StrSchema
                        gamma_retry_count = schemas.IntSchema
                        gamma_start_date = schemas.StrSchema
                        gamma_end_date = schemas.StrSchema
                        gamma_mode = schemas.StrSchema
                        gamma_file_name = schemas.StrSchema
                        gamma_comment = schemas.StrSchema
                        lscisp_target_flg = schemas.StrSchema
                        lscisp_status = schemas.StrSchema
                        lscisp_retry_count = schemas.IntSchema
                        lscisp_start_date = schemas.StrSchema
                        lscisp_end_date = schemas.StrSchema
                        lscisp_mode = schemas.StrSchema
                        lscisp_file_name = schemas.StrSchema
                        lscisp_comment = schemas.StrSchema
                        lscraw_target_flg = schemas.StrSchema
                        lscraw_status = schemas.StrSchema
                        lscraw_retry_count = schemas.IntSchema
                        lscraw_start_date = schemas.StrSchema
                        lscraw_end_date = schemas.StrSchema
                        lscraw_mode = schemas.StrSchema
                        lscraw_file_name = schemas.StrSchema
                        lscraw_comment = schemas.StrSchema
                        prewb_target_flg = schemas.StrSchema
                        prewb_status = schemas.StrSchema
                        prewb_retry_count = schemas.IntSchema
                        prewb_start_date = schemas.StrSchema
                        prewb_end_date = schemas.StrSchema
                        prewb_mode = schemas.StrSchema
                        prewb_file_name = schemas.StrSchema
                        prewb_comment = schemas.StrSchema
                        dewarp_target_flg = schemas.StrSchema
                        dewarp_status = schemas.StrSchema
                        dewarp_retry_count = schemas.IntSchema
                        dewarp_start_date = schemas.StrSchema
                        dewarp_end_date = schemas.StrSchema
                        dewarp_mode = schemas.StrSchema
                        dewarp_file_name = schemas.StrSchema
                        dewarp_comment = schemas.StrSchema
                        __annotations__ = {
                            "color_matrix_target_flg": color_matrix_target_flg,
                            "color_matrix_status": color_matrix_status,
                            "color_matrix_retry_count": color_matrix_retry_count,
                            "color_matrix_start_date": color_matrix_start_date,
                            "color_matrix_end_date": color_matrix_end_date,
                            "color_matrix_mode": color_matrix_mode,
                            "color_matrix_file_name": color_matrix_file_name,
                            "color_matrix_comment": color_matrix_comment,
                            "gamma_target_flg": gamma_target_flg,
                            "gamma_status": gamma_status,
                            "gamma_retry_count": gamma_retry_count,
                            "gamma_start_date": gamma_start_date,
                            "gamma_end_date": gamma_end_date,
                            "gamma_mode": gamma_mode,
                            "gamma_file_name": gamma_file_name,
                            "gamma_comment": gamma_comment,
                            "lscisp_target_flg": lscisp_target_flg,
                            "lscisp_status": lscisp_status,
                            "lscisp_retry_count": lscisp_retry_count,
                            "lscisp_start_date": lscisp_start_date,
                            "lscisp_end_date": lscisp_end_date,
                            "lscisp_mode": lscisp_mode,
                            "lscisp_file_name": lscisp_file_name,
                            "lscisp_comment": lscisp_comment,
                            "lscraw_target_flg": lscraw_target_flg,
                            "lscraw_status": lscraw_status,
                            "lscraw_retry_count": lscraw_retry_count,
                            "lscraw_start_date": lscraw_start_date,
                            "lscraw_end_date": lscraw_end_date,
                            "lscraw_mode": lscraw_mode,
                            "lscraw_file_name": lscraw_file_name,
                            "lscraw_comment": lscraw_comment,
                            "prewb_target_flg": prewb_target_flg,
                            "prewb_status": prewb_status,
                            "prewb_retry_count": prewb_retry_count,
                            "prewb_start_date": prewb_start_date,
                            "prewb_end_date": prewb_end_date,
                            "prewb_mode": prewb_mode,
                            "prewb_file_name": prewb_file_name,
                            "prewb_comment": prewb_comment,
                            "dewarp_target_flg": dewarp_target_flg,
                            "dewarp_status": dewarp_status,
                            "dewarp_retry_count": dewarp_retry_count,
                            "dewarp_start_date": dewarp_start_date,
                            "dewarp_end_date": dewarp_end_date,
                            "dewarp_mode": dewarp_mode,
                            "dewarp_file_name": dewarp_file_name,
                            "dewarp_comment": dewarp_comment,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["color_matrix_target_flg"]) -> MetaOapg.properties.color_matrix_target_flg: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["color_matrix_status"]) -> MetaOapg.properties.color_matrix_status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["color_matrix_retry_count"]) -> MetaOapg.properties.color_matrix_retry_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["color_matrix_start_date"]) -> MetaOapg.properties.color_matrix_start_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["color_matrix_end_date"]) -> MetaOapg.properties.color_matrix_end_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["color_matrix_mode"]) -> MetaOapg.properties.color_matrix_mode: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["color_matrix_file_name"]) -> MetaOapg.properties.color_matrix_file_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["color_matrix_comment"]) -> MetaOapg.properties.color_matrix_comment: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["gamma_target_flg"]) -> MetaOapg.properties.gamma_target_flg: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["gamma_status"]) -> MetaOapg.properties.gamma_status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["gamma_retry_count"]) -> MetaOapg.properties.gamma_retry_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["gamma_start_date"]) -> MetaOapg.properties.gamma_start_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["gamma_end_date"]) -> MetaOapg.properties.gamma_end_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["gamma_mode"]) -> MetaOapg.properties.gamma_mode: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["gamma_file_name"]) -> MetaOapg.properties.gamma_file_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["gamma_comment"]) -> MetaOapg.properties.gamma_comment: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lscisp_target_flg"]) -> MetaOapg.properties.lscisp_target_flg: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lscisp_status"]) -> MetaOapg.properties.lscisp_status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lscisp_retry_count"]) -> MetaOapg.properties.lscisp_retry_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lscisp_start_date"]) -> MetaOapg.properties.lscisp_start_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lscisp_end_date"]) -> MetaOapg.properties.lscisp_end_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lscisp_mode"]) -> MetaOapg.properties.lscisp_mode: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lscisp_file_name"]) -> MetaOapg.properties.lscisp_file_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lscisp_comment"]) -> MetaOapg.properties.lscisp_comment: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lscraw_target_flg"]) -> MetaOapg.properties.lscraw_target_flg: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lscraw_status"]) -> MetaOapg.properties.lscraw_status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lscraw_retry_count"]) -> MetaOapg.properties.lscraw_retry_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lscraw_start_date"]) -> MetaOapg.properties.lscraw_start_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lscraw_end_date"]) -> MetaOapg.properties.lscraw_end_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lscraw_mode"]) -> MetaOapg.properties.lscraw_mode: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lscraw_file_name"]) -> MetaOapg.properties.lscraw_file_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["lscraw_comment"]) -> MetaOapg.properties.lscraw_comment: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["prewb_target_flg"]) -> MetaOapg.properties.prewb_target_flg: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["prewb_status"]) -> MetaOapg.properties.prewb_status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["prewb_retry_count"]) -> MetaOapg.properties.prewb_retry_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["prewb_start_date"]) -> MetaOapg.properties.prewb_start_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["prewb_end_date"]) -> MetaOapg.properties.prewb_end_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["prewb_mode"]) -> MetaOapg.properties.prewb_mode: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["prewb_file_name"]) -> MetaOapg.properties.prewb_file_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["prewb_comment"]) -> MetaOapg.properties.prewb_comment: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dewarp_target_flg"]) -> MetaOapg.properties.dewarp_target_flg: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dewarp_status"]) -> MetaOapg.properties.dewarp_status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dewarp_retry_count"]) -> MetaOapg.properties.dewarp_retry_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dewarp_start_date"]) -> MetaOapg.properties.dewarp_start_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dewarp_end_date"]) -> MetaOapg.properties.dewarp_end_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dewarp_mode"]) -> MetaOapg.properties.dewarp_mode: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dewarp_file_name"]) -> MetaOapg.properties.dewarp_file_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dewarp_comment"]) -> MetaOapg.properties.dewarp_comment: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["color_matrix_target_flg", "color_matrix_status", "color_matrix_retry_count", "color_matrix_start_date", "color_matrix_end_date", "color_matrix_mode", "color_matrix_file_name", "color_matrix_comment", "gamma_target_flg", "gamma_status", "gamma_retry_count", "gamma_start_date", "gamma_end_date", "gamma_mode", "gamma_file_name", "gamma_comment", "lscisp_target_flg", "lscisp_status", "lscisp_retry_count", "lscisp_start_date", "lscisp_end_date", "lscisp_mode", "lscisp_file_name", "lscisp_comment", "lscraw_target_flg", "lscraw_status", "lscraw_retry_count", "lscraw_start_date", "lscraw_end_date", "lscraw_mode", "lscraw_file_name", "lscraw_comment", "prewb_target_flg", "prewb_status", "prewb_retry_count", "prewb_start_date", "prewb_end_date", "prewb_mode", "prewb_file_name", "prewb_comment", "dewarp_target_flg", "dewarp_status", "dewarp_retry_count", "dewarp_start_date", "dewarp_end_date", "dewarp_mode", "dewarp_file_name", "dewarp_comment", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["color_matrix_target_flg"]) -> typing.Union[MetaOapg.properties.color_matrix_target_flg, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["color_matrix_status"]) -> typing.Union[MetaOapg.properties.color_matrix_status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["color_matrix_retry_count"]) -> typing.Union[MetaOapg.properties.color_matrix_retry_count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["color_matrix_start_date"]) -> typing.Union[MetaOapg.properties.color_matrix_start_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["color_matrix_end_date"]) -> typing.Union[MetaOapg.properties.color_matrix_end_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["color_matrix_mode"]) -> typing.Union[MetaOapg.properties.color_matrix_mode, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["color_matrix_file_name"]) -> typing.Union[MetaOapg.properties.color_matrix_file_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["color_matrix_comment"]) -> typing.Union[MetaOapg.properties.color_matrix_comment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["gamma_target_flg"]) -> typing.Union[MetaOapg.properties.gamma_target_flg, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["gamma_status"]) -> typing.Union[MetaOapg.properties.gamma_status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["gamma_retry_count"]) -> typing.Union[MetaOapg.properties.gamma_retry_count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["gamma_start_date"]) -> typing.Union[MetaOapg.properties.gamma_start_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["gamma_end_date"]) -> typing.Union[MetaOapg.properties.gamma_end_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["gamma_mode"]) -> typing.Union[MetaOapg.properties.gamma_mode, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["gamma_file_name"]) -> typing.Union[MetaOapg.properties.gamma_file_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["gamma_comment"]) -> typing.Union[MetaOapg.properties.gamma_comment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lscisp_target_flg"]) -> typing.Union[MetaOapg.properties.lscisp_target_flg, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lscisp_status"]) -> typing.Union[MetaOapg.properties.lscisp_status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lscisp_retry_count"]) -> typing.Union[MetaOapg.properties.lscisp_retry_count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lscisp_start_date"]) -> typing.Union[MetaOapg.properties.lscisp_start_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lscisp_end_date"]) -> typing.Union[MetaOapg.properties.lscisp_end_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lscisp_mode"]) -> typing.Union[MetaOapg.properties.lscisp_mode, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lscisp_file_name"]) -> typing.Union[MetaOapg.properties.lscisp_file_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lscisp_comment"]) -> typing.Union[MetaOapg.properties.lscisp_comment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lscraw_target_flg"]) -> typing.Union[MetaOapg.properties.lscraw_target_flg, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lscraw_status"]) -> typing.Union[MetaOapg.properties.lscraw_status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lscraw_retry_count"]) -> typing.Union[MetaOapg.properties.lscraw_retry_count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lscraw_start_date"]) -> typing.Union[MetaOapg.properties.lscraw_start_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lscraw_end_date"]) -> typing.Union[MetaOapg.properties.lscraw_end_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lscraw_mode"]) -> typing.Union[MetaOapg.properties.lscraw_mode, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lscraw_file_name"]) -> typing.Union[MetaOapg.properties.lscraw_file_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["lscraw_comment"]) -> typing.Union[MetaOapg.properties.lscraw_comment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["prewb_target_flg"]) -> typing.Union[MetaOapg.properties.prewb_target_flg, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["prewb_status"]) -> typing.Union[MetaOapg.properties.prewb_status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["prewb_retry_count"]) -> typing.Union[MetaOapg.properties.prewb_retry_count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["prewb_start_date"]) -> typing.Union[MetaOapg.properties.prewb_start_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["prewb_end_date"]) -> typing.Union[MetaOapg.properties.prewb_end_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["prewb_mode"]) -> typing.Union[MetaOapg.properties.prewb_mode, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["prewb_file_name"]) -> typing.Union[MetaOapg.properties.prewb_file_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["prewb_comment"]) -> typing.Union[MetaOapg.properties.prewb_comment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dewarp_target_flg"]) -> typing.Union[MetaOapg.properties.dewarp_target_flg, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dewarp_status"]) -> typing.Union[MetaOapg.properties.dewarp_status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dewarp_retry_count"]) -> typing.Union[MetaOapg.properties.dewarp_retry_count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dewarp_start_date"]) -> typing.Union[MetaOapg.properties.dewarp_start_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dewarp_end_date"]) -> typing.Union[MetaOapg.properties.dewarp_end_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dewarp_mode"]) -> typing.Union[MetaOapg.properties.dewarp_mode, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dewarp_file_name"]) -> typing.Union[MetaOapg.properties.dewarp_file_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dewarp_comment"]) -> typing.Union[MetaOapg.properties.dewarp_comment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["color_matrix_target_flg", "color_matrix_status", "color_matrix_retry_count", "color_matrix_start_date", "color_matrix_end_date", "color_matrix_mode", "color_matrix_file_name", "color_matrix_comment", "gamma_target_flg", "gamma_status", "gamma_retry_count", "gamma_start_date", "gamma_end_date", "gamma_mode", "gamma_file_name", "gamma_comment", "lscisp_target_flg", "lscisp_status", "lscisp_retry_count", "lscisp_start_date", "lscisp_end_date", "lscisp_mode", "lscisp_file_name", "lscisp_comment", "lscraw_target_flg", "lscraw_status", "lscraw_retry_count", "lscraw_start_date", "lscraw_end_date", "lscraw_mode", "lscraw_file_name", "lscraw_comment", "prewb_target_flg", "prewb_status", "prewb_retry_count", "prewb_start_date", "prewb_end_date", "prewb_mode", "prewb_file_name", "prewb_comment", "dewarp_target_flg", "dewarp_status", "dewarp_retry_count", "dewarp_start_date", "dewarp_end_date", "dewarp_mode", "dewarp_file_name", "dewarp_comment", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    color_matrix_target_flg: typing.Union[MetaOapg.properties.color_matrix_target_flg, str, schemas.Unset] = schemas.unset,
                    color_matrix_status: typing.Union[MetaOapg.properties.color_matrix_status, str, schemas.Unset] = schemas.unset,
                    color_matrix_retry_count: typing.Union[MetaOapg.properties.color_matrix_retry_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    color_matrix_start_date: typing.Union[MetaOapg.properties.color_matrix_start_date, str, schemas.Unset] = schemas.unset,
                    color_matrix_end_date: typing.Union[MetaOapg.properties.color_matrix_end_date, str, schemas.Unset] = schemas.unset,
                    color_matrix_mode: typing.Union[MetaOapg.properties.color_matrix_mode, str, schemas.Unset] = schemas.unset,
                    color_matrix_file_name: typing.Union[MetaOapg.properties.color_matrix_file_name, str, schemas.Unset] = schemas.unset,
                    color_matrix_comment: typing.Union[MetaOapg.properties.color_matrix_comment, str, schemas.Unset] = schemas.unset,
                    gamma_target_flg: typing.Union[MetaOapg.properties.gamma_target_flg, str, schemas.Unset] = schemas.unset,
                    gamma_status: typing.Union[MetaOapg.properties.gamma_status, str, schemas.Unset] = schemas.unset,
                    gamma_retry_count: typing.Union[MetaOapg.properties.gamma_retry_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    gamma_start_date: typing.Union[MetaOapg.properties.gamma_start_date, str, schemas.Unset] = schemas.unset,
                    gamma_end_date: typing.Union[MetaOapg.properties.gamma_end_date, str, schemas.Unset] = schemas.unset,
                    gamma_mode: typing.Union[MetaOapg.properties.gamma_mode, str, schemas.Unset] = schemas.unset,
                    gamma_file_name: typing.Union[MetaOapg.properties.gamma_file_name, str, schemas.Unset] = schemas.unset,
                    gamma_comment: typing.Union[MetaOapg.properties.gamma_comment, str, schemas.Unset] = schemas.unset,
                    lscisp_target_flg: typing.Union[MetaOapg.properties.lscisp_target_flg, str, schemas.Unset] = schemas.unset,
                    lscisp_status: typing.Union[MetaOapg.properties.lscisp_status, str, schemas.Unset] = schemas.unset,
                    lscisp_retry_count: typing.Union[MetaOapg.properties.lscisp_retry_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    lscisp_start_date: typing.Union[MetaOapg.properties.lscisp_start_date, str, schemas.Unset] = schemas.unset,
                    lscisp_end_date: typing.Union[MetaOapg.properties.lscisp_end_date, str, schemas.Unset] = schemas.unset,
                    lscisp_mode: typing.Union[MetaOapg.properties.lscisp_mode, str, schemas.Unset] = schemas.unset,
                    lscisp_file_name: typing.Union[MetaOapg.properties.lscisp_file_name, str, schemas.Unset] = schemas.unset,
                    lscisp_comment: typing.Union[MetaOapg.properties.lscisp_comment, str, schemas.Unset] = schemas.unset,
                    lscraw_target_flg: typing.Union[MetaOapg.properties.lscraw_target_flg, str, schemas.Unset] = schemas.unset,
                    lscraw_status: typing.Union[MetaOapg.properties.lscraw_status, str, schemas.Unset] = schemas.unset,
                    lscraw_retry_count: typing.Union[MetaOapg.properties.lscraw_retry_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    lscraw_start_date: typing.Union[MetaOapg.properties.lscraw_start_date, str, schemas.Unset] = schemas.unset,
                    lscraw_end_date: typing.Union[MetaOapg.properties.lscraw_end_date, str, schemas.Unset] = schemas.unset,
                    lscraw_mode: typing.Union[MetaOapg.properties.lscraw_mode, str, schemas.Unset] = schemas.unset,
                    lscraw_file_name: typing.Union[MetaOapg.properties.lscraw_file_name, str, schemas.Unset] = schemas.unset,
                    lscraw_comment: typing.Union[MetaOapg.properties.lscraw_comment, str, schemas.Unset] = schemas.unset,
                    prewb_target_flg: typing.Union[MetaOapg.properties.prewb_target_flg, str, schemas.Unset] = schemas.unset,
                    prewb_status: typing.Union[MetaOapg.properties.prewb_status, str, schemas.Unset] = schemas.unset,
                    prewb_retry_count: typing.Union[MetaOapg.properties.prewb_retry_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    prewb_start_date: typing.Union[MetaOapg.properties.prewb_start_date, str, schemas.Unset] = schemas.unset,
                    prewb_end_date: typing.Union[MetaOapg.properties.prewb_end_date, str, schemas.Unset] = schemas.unset,
                    prewb_mode: typing.Union[MetaOapg.properties.prewb_mode, str, schemas.Unset] = schemas.unset,
                    prewb_file_name: typing.Union[MetaOapg.properties.prewb_file_name, str, schemas.Unset] = schemas.unset,
                    prewb_comment: typing.Union[MetaOapg.properties.prewb_comment, str, schemas.Unset] = schemas.unset,
                    dewarp_target_flg: typing.Union[MetaOapg.properties.dewarp_target_flg, str, schemas.Unset] = schemas.unset,
                    dewarp_status: typing.Union[MetaOapg.properties.dewarp_status, str, schemas.Unset] = schemas.unset,
                    dewarp_retry_count: typing.Union[MetaOapg.properties.dewarp_retry_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    dewarp_start_date: typing.Union[MetaOapg.properties.dewarp_start_date, str, schemas.Unset] = schemas.unset,
                    dewarp_end_date: typing.Union[MetaOapg.properties.dewarp_end_date, str, schemas.Unset] = schemas.unset,
                    dewarp_mode: typing.Union[MetaOapg.properties.dewarp_mode, str, schemas.Unset] = schemas.unset,
                    dewarp_file_name: typing.Union[MetaOapg.properties.dewarp_file_name, str, schemas.Unset] = schemas.unset,
                    dewarp_comment: typing.Union[MetaOapg.properties.dewarp_comment, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'custom_setting':
                    return super().__new__(
                        cls,
                        *args,
                        color_matrix_target_flg=color_matrix_target_flg,
                        color_matrix_status=color_matrix_status,
                        color_matrix_retry_count=color_matrix_retry_count,
                        color_matrix_start_date=color_matrix_start_date,
                        color_matrix_end_date=color_matrix_end_date,
                        color_matrix_mode=color_matrix_mode,
                        color_matrix_file_name=color_matrix_file_name,
                        color_matrix_comment=color_matrix_comment,
                        gamma_target_flg=gamma_target_flg,
                        gamma_status=gamma_status,
                        gamma_retry_count=gamma_retry_count,
                        gamma_start_date=gamma_start_date,
                        gamma_end_date=gamma_end_date,
                        gamma_mode=gamma_mode,
                        gamma_file_name=gamma_file_name,
                        gamma_comment=gamma_comment,
                        lscisp_target_flg=lscisp_target_flg,
                        lscisp_status=lscisp_status,
                        lscisp_retry_count=lscisp_retry_count,
                        lscisp_start_date=lscisp_start_date,
                        lscisp_end_date=lscisp_end_date,
                        lscisp_mode=lscisp_mode,
                        lscisp_file_name=lscisp_file_name,
                        lscisp_comment=lscisp_comment,
                        lscraw_target_flg=lscraw_target_flg,
                        lscraw_status=lscraw_status,
                        lscraw_retry_count=lscraw_retry_count,
                        lscraw_start_date=lscraw_start_date,
                        lscraw_end_date=lscraw_end_date,
                        lscraw_mode=lscraw_mode,
                        lscraw_file_name=lscraw_file_name,
                        lscraw_comment=lscraw_comment,
                        prewb_target_flg=prewb_target_flg,
                        prewb_status=prewb_status,
                        prewb_retry_count=prewb_retry_count,
                        prewb_start_date=prewb_start_date,
                        prewb_end_date=prewb_end_date,
                        prewb_mode=prewb_mode,
                        prewb_file_name=prewb_file_name,
                        prewb_comment=prewb_comment,
                        dewarp_target_flg=dewarp_target_flg,
                        dewarp_status=dewarp_status,
                        dewarp_retry_count=dewarp_retry_count,
                        dewarp_start_date=dewarp_start_date,
                        dewarp_end_date=dewarp_end_date,
                        dewarp_mode=dewarp_mode,
                        dewarp_file_name=dewarp_file_name,
                        dewarp_comment=dewarp_comment,
                        _configuration=_configuration,
                        **kwargs,
                    )
            ins_id = schemas.StrSchema
            ins_date = schemas.StrSchema
            upd_id = schemas.StrSchema
            upd_date = schemas.StrSchema
            deploy_comment = schemas.StrSchema
            total_status = schemas.StrSchema
            app_name = schemas.StrSchema
            version_number = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "deploy_type": deploy_type,
                "deploy_status": deploy_status,
                "replace_network_id": replace_network_id,
                "current_target": current_target,
                "firmware": firmware,
                "model": model,
                "custom_setting": custom_setting,
                "ins_id": ins_id,
                "ins_date": ins_date,
                "upd_id": upd_id,
                "upd_date": upd_date,
                "deploy_comment": deploy_comment,
                "total_status": total_status,
                "app_name": app_name,
                "version_number": version_number,
            }
    
    current_target: MetaOapg.properties.current_target
    deploy_status: MetaOapg.properties.deploy_status
    deploy_type: MetaOapg.properties.deploy_type
    ins_date: MetaOapg.properties.ins_date
    upd_id: MetaOapg.properties.upd_id
    replace_network_id: MetaOapg.properties.replace_network_id
    config_id: schemas.AnyTypeSchema
    upd_date: MetaOapg.properties.upd_date
    model: MetaOapg.properties.model
    id: MetaOapg.properties.id
    ins_id: MetaOapg.properties.ins_id
    custom_setting: MetaOapg.properties.custom_setting
    firmware: MetaOapg.properties.firmware
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deploy_type"]) -> MetaOapg.properties.deploy_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deploy_status"]) -> MetaOapg.properties.deploy_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replace_network_id"]) -> MetaOapg.properties.replace_network_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_target"]) -> MetaOapg.properties.current_target: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firmware"]) -> MetaOapg.properties.firmware: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_setting"]) -> MetaOapg.properties.custom_setting: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ins_id"]) -> MetaOapg.properties.ins_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ins_date"]) -> MetaOapg.properties.ins_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upd_id"]) -> MetaOapg.properties.upd_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upd_date"]) -> MetaOapg.properties.upd_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deploy_comment"]) -> MetaOapg.properties.deploy_comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_status"]) -> MetaOapg.properties.total_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_name"]) -> MetaOapg.properties.app_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version_number"]) -> MetaOapg.properties.version_number: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "deploy_type", "deploy_status", "replace_network_id", "current_target", "firmware", "model", "custom_setting", "ins_id", "ins_date", "upd_id", "upd_date", "deploy_comment", "total_status", "app_name", "version_number", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deploy_type"]) -> MetaOapg.properties.deploy_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deploy_status"]) -> MetaOapg.properties.deploy_status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replace_network_id"]) -> MetaOapg.properties.replace_network_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_target"]) -> MetaOapg.properties.current_target: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firmware"]) -> MetaOapg.properties.firmware: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_setting"]) -> MetaOapg.properties.custom_setting: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ins_id"]) -> MetaOapg.properties.ins_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ins_date"]) -> MetaOapg.properties.ins_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upd_id"]) -> MetaOapg.properties.upd_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upd_date"]) -> MetaOapg.properties.upd_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deploy_comment"]) -> typing.Union[MetaOapg.properties.deploy_comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_status"]) -> typing.Union[MetaOapg.properties.total_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_name"]) -> typing.Union[MetaOapg.properties.app_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version_number"]) -> typing.Union[MetaOapg.properties.version_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "deploy_type", "deploy_status", "replace_network_id", "current_target", "firmware", "model", "custom_setting", "ins_id", "ins_date", "upd_id", "upd_date", "deploy_comment", "total_status", "app_name", "version_number", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        current_target: typing.Union[MetaOapg.properties.current_target, str, ],
        deploy_status: typing.Union[MetaOapg.properties.deploy_status, str, ],
        deploy_type: typing.Union[MetaOapg.properties.deploy_type, str, ],
        ins_date: typing.Union[MetaOapg.properties.ins_date, str, ],
        upd_id: typing.Union[MetaOapg.properties.upd_id, str, ],
        replace_network_id: typing.Union[MetaOapg.properties.replace_network_id, str, ],
        config_id: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        upd_date: typing.Union[MetaOapg.properties.upd_date, str, ],
        model: typing.Union[MetaOapg.properties.model, dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        ins_id: typing.Union[MetaOapg.properties.ins_id, str, ],
        custom_setting: typing.Union[MetaOapg.properties.custom_setting, dict, frozendict.frozendict, ],
        firmware: typing.Union[MetaOapg.properties.firmware, dict, frozendict.frozendict, ],
        deploy_comment: typing.Union[MetaOapg.properties.deploy_comment, str, schemas.Unset] = schemas.unset,
        total_status: typing.Union[MetaOapg.properties.total_status, str, schemas.Unset] = schemas.unset,
        app_name: typing.Union[MetaOapg.properties.app_name, str, schemas.Unset] = schemas.unset,
        version_number: typing.Union[MetaOapg.properties.version_number, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeployHistory':
        return super().__new__(
            cls,
            *args,
            current_target=current_target,
            deploy_status=deploy_status,
            deploy_type=deploy_type,
            ins_date=ins_date,
            upd_id=upd_id,
            replace_network_id=replace_network_id,
            config_id=config_id,
            upd_date=upd_date,
            model=model,
            id=id,
            ins_id=ins_id,
            custom_setting=custom_setting,
            firmware=firmware,
            deploy_comment=deploy_comment,
            total_status=total_status,
            app_name=app_name,
            version_number=version_number,
            _configuration=_configuration,
            **kwargs,
        )
