# coding: utf-8

"""
    AITRIOS | Console

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.4.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aitrios_console_rest_client_sdk_primitive import schemas  # noqa: F401


class EventLog(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            DeviceID = schemas.StrSchema
            Level = schemas.StrSchema
            Component = schemas.StrSchema
            ErrorCode = schemas.StrSchema
            Description = schemas.StrSchema
            Time = schemas.StrSchema
            ingestion_time = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "DeviceID": DeviceID,
                "Level": Level,
                "Component": Component,
                "ErrorCode": ErrorCode,
                "Description": Description,
                "Time": Time,
                "ingestion_time": ingestion_time,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DeviceID"]) -> MetaOapg.properties.DeviceID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Level"]) -> MetaOapg.properties.Level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Component"]) -> MetaOapg.properties.Component: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ErrorCode"]) -> MetaOapg.properties.ErrorCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Description"]) -> MetaOapg.properties.Description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Time"]) -> MetaOapg.properties.Time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ingestion_time"]) -> MetaOapg.properties.ingestion_time: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "DeviceID", "Level", "Component", "ErrorCode", "Description", "Time", "ingestion_time", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DeviceID"]) -> typing.Union[MetaOapg.properties.DeviceID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Level"]) -> typing.Union[MetaOapg.properties.Level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Component"]) -> typing.Union[MetaOapg.properties.Component, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ErrorCode"]) -> typing.Union[MetaOapg.properties.ErrorCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Description"]) -> typing.Union[MetaOapg.properties.Description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Time"]) -> typing.Union[MetaOapg.properties.Time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ingestion_time"]) -> typing.Union[MetaOapg.properties.ingestion_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "DeviceID", "Level", "Component", "ErrorCode", "Description", "Time", "ingestion_time", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        DeviceID: typing.Union[MetaOapg.properties.DeviceID, str, schemas.Unset] = schemas.unset,
        Level: typing.Union[MetaOapg.properties.Level, str, schemas.Unset] = schemas.unset,
        Component: typing.Union[MetaOapg.properties.Component, str, schemas.Unset] = schemas.unset,
        ErrorCode: typing.Union[MetaOapg.properties.ErrorCode, str, schemas.Unset] = schemas.unset,
        Description: typing.Union[MetaOapg.properties.Description, str, schemas.Unset] = schemas.unset,
        Time: typing.Union[MetaOapg.properties.Time, str, schemas.Unset] = schemas.unset,
        ingestion_time: typing.Union[MetaOapg.properties.ingestion_time, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EventLog':
        return super().__new__(
            cls,
            *_args,
            id=id,
            DeviceID=DeviceID,
            Level=Level,
            Component=Component,
            ErrorCode=ErrorCode,
            Description=Description,
            Time=Time,
            ingestion_time=ingestion_time,
            _configuration=_configuration,
            **kwargs,
        )
