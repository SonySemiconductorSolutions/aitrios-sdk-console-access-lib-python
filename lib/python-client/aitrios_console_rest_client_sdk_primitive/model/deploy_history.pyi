# coding: utf-8

"""
    AITRIOS | Console

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.4.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aitrios_console_rest_client_sdk_primitive import schemas  # noqa: F401


class DeployHistory(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "ins_date",
            "upd_id",
            "replace_network_id",
            "current_target",
            "upd_date",
            "model",
            "id",
            "deploy_status",
            "deploy_type",
            "ins_id",
            "custom_setting",
            "firmware",
        }
        
        class properties:
            id = schemas.IntSchema
            deploy_type = schemas.StrSchema
            deploy_status = schemas.StrSchema
            replace_network_id = schemas.StrSchema
            current_target = schemas.StrSchema
            
            
            class firmware(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        sensor_loader_target_flg = schemas.StrSchema
                        sensor_loader_status = schemas.StrSchema
                        sensor_loader_retry_count = schemas.IntSchema
                        sensor_loader_start_date = schemas.StrSchema
                        sensor_loader_end_date = schemas.StrSchema
                        sensor_loader_version_number = schemas.StrSchema
                        sensor_loader_version_comment = schemas.StrSchema
                        sensor_target_flg = schemas.StrSchema
                        sensor_status = schemas.StrSchema
                        sensor_retry_count = schemas.IntSchema
                        sensor_start_date = schemas.StrSchema
                        sensor_end_date = schemas.StrSchema
                        sensor_version_number = schemas.StrSchema
                        sensor_version_comment = schemas.StrSchema
                        apfw_target_flg = schemas.StrSchema
                        apfw_status = schemas.StrSchema
                        apfw_retry_count = schemas.IntSchema
                        apfw_start_date = schemas.StrSchema
                        apfw_end_date = schemas.StrSchema
                        apfw_version_number = schemas.StrSchema
                        apfw_version_comment = schemas.StrSchema
                        __annotations__ = {
                            "sensor_loader_target_flg": sensor_loader_target_flg,
                            "sensor_loader_status": sensor_loader_status,
                            "sensor_loader_retry_count": sensor_loader_retry_count,
                            "sensor_loader_start_date": sensor_loader_start_date,
                            "sensor_loader_end_date": sensor_loader_end_date,
                            "sensor_loader_version_number": sensor_loader_version_number,
                            "sensor_loader_version_comment": sensor_loader_version_comment,
                            "sensor_target_flg": sensor_target_flg,
                            "sensor_status": sensor_status,
                            "sensor_retry_count": sensor_retry_count,
                            "sensor_start_date": sensor_start_date,
                            "sensor_end_date": sensor_end_date,
                            "sensor_version_number": sensor_version_number,
                            "sensor_version_comment": sensor_version_comment,
                            "apfw_target_flg": apfw_target_flg,
                            "apfw_status": apfw_status,
                            "apfw_retry_count": apfw_retry_count,
                            "apfw_start_date": apfw_start_date,
                            "apfw_end_date": apfw_end_date,
                            "apfw_version_number": apfw_version_number,
                            "apfw_version_comment": apfw_version_comment,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_loader_target_flg"]) -> MetaOapg.properties.sensor_loader_target_flg: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_loader_status"]) -> MetaOapg.properties.sensor_loader_status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_loader_retry_count"]) -> MetaOapg.properties.sensor_loader_retry_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_loader_start_date"]) -> MetaOapg.properties.sensor_loader_start_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_loader_end_date"]) -> MetaOapg.properties.sensor_loader_end_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_loader_version_number"]) -> MetaOapg.properties.sensor_loader_version_number: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_loader_version_comment"]) -> MetaOapg.properties.sensor_loader_version_comment: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_target_flg"]) -> MetaOapg.properties.sensor_target_flg: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_status"]) -> MetaOapg.properties.sensor_status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_retry_count"]) -> MetaOapg.properties.sensor_retry_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_start_date"]) -> MetaOapg.properties.sensor_start_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_end_date"]) -> MetaOapg.properties.sensor_end_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_version_number"]) -> MetaOapg.properties.sensor_version_number: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_version_comment"]) -> MetaOapg.properties.sensor_version_comment: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["apfw_target_flg"]) -> MetaOapg.properties.apfw_target_flg: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["apfw_status"]) -> MetaOapg.properties.apfw_status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["apfw_retry_count"]) -> MetaOapg.properties.apfw_retry_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["apfw_start_date"]) -> MetaOapg.properties.apfw_start_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["apfw_end_date"]) -> MetaOapg.properties.apfw_end_date: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["apfw_version_number"]) -> MetaOapg.properties.apfw_version_number: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["apfw_version_comment"]) -> MetaOapg.properties.apfw_version_comment: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["sensor_loader_target_flg", "sensor_loader_status", "sensor_loader_retry_count", "sensor_loader_start_date", "sensor_loader_end_date", "sensor_loader_version_number", "sensor_loader_version_comment", "sensor_target_flg", "sensor_status", "sensor_retry_count", "sensor_start_date", "sensor_end_date", "sensor_version_number", "sensor_version_comment", "apfw_target_flg", "apfw_status", "apfw_retry_count", "apfw_start_date", "apfw_end_date", "apfw_version_number", "apfw_version_comment", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_loader_target_flg"]) -> typing.Union[MetaOapg.properties.sensor_loader_target_flg, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_loader_status"]) -> typing.Union[MetaOapg.properties.sensor_loader_status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_loader_retry_count"]) -> typing.Union[MetaOapg.properties.sensor_loader_retry_count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_loader_start_date"]) -> typing.Union[MetaOapg.properties.sensor_loader_start_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_loader_end_date"]) -> typing.Union[MetaOapg.properties.sensor_loader_end_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_loader_version_number"]) -> typing.Union[MetaOapg.properties.sensor_loader_version_number, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_loader_version_comment"]) -> typing.Union[MetaOapg.properties.sensor_loader_version_comment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_target_flg"]) -> typing.Union[MetaOapg.properties.sensor_target_flg, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_status"]) -> typing.Union[MetaOapg.properties.sensor_status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_retry_count"]) -> typing.Union[MetaOapg.properties.sensor_retry_count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_start_date"]) -> typing.Union[MetaOapg.properties.sensor_start_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_end_date"]) -> typing.Union[MetaOapg.properties.sensor_end_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_version_number"]) -> typing.Union[MetaOapg.properties.sensor_version_number, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_version_comment"]) -> typing.Union[MetaOapg.properties.sensor_version_comment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["apfw_target_flg"]) -> typing.Union[MetaOapg.properties.apfw_target_flg, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["apfw_status"]) -> typing.Union[MetaOapg.properties.apfw_status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["apfw_retry_count"]) -> typing.Union[MetaOapg.properties.apfw_retry_count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["apfw_start_date"]) -> typing.Union[MetaOapg.properties.apfw_start_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["apfw_end_date"]) -> typing.Union[MetaOapg.properties.apfw_end_date, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["apfw_version_number"]) -> typing.Union[MetaOapg.properties.apfw_version_number, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["apfw_version_comment"]) -> typing.Union[MetaOapg.properties.apfw_version_comment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sensor_loader_target_flg", "sensor_loader_status", "sensor_loader_retry_count", "sensor_loader_start_date", "sensor_loader_end_date", "sensor_loader_version_number", "sensor_loader_version_comment", "sensor_target_flg", "sensor_status", "sensor_retry_count", "sensor_start_date", "sensor_end_date", "sensor_version_number", "sensor_version_comment", "apfw_target_flg", "apfw_status", "apfw_retry_count", "apfw_start_date", "apfw_end_date", "apfw_version_number", "apfw_version_comment", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    sensor_loader_target_flg: typing.Union[MetaOapg.properties.sensor_loader_target_flg, str, schemas.Unset] = schemas.unset,
                    sensor_loader_status: typing.Union[MetaOapg.properties.sensor_loader_status, str, schemas.Unset] = schemas.unset,
                    sensor_loader_retry_count: typing.Union[MetaOapg.properties.sensor_loader_retry_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    sensor_loader_start_date: typing.Union[MetaOapg.properties.sensor_loader_start_date, str, schemas.Unset] = schemas.unset,
                    sensor_loader_end_date: typing.Union[MetaOapg.properties.sensor_loader_end_date, str, schemas.Unset] = schemas.unset,
                    sensor_loader_version_number: typing.Union[MetaOapg.properties.sensor_loader_version_number, str, schemas.Unset] = schemas.unset,
                    sensor_loader_version_comment: typing.Union[MetaOapg.properties.sensor_loader_version_comment, str, schemas.Unset] = schemas.unset,
                    sensor_target_flg: typing.Union[MetaOapg.properties.sensor_target_flg, str, schemas.Unset] = schemas.unset,
                    sensor_status: typing.Union[MetaOapg.properties.sensor_status, str, schemas.Unset] = schemas.unset,
                    sensor_retry_count: typing.Union[MetaOapg.properties.sensor_retry_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    sensor_start_date: typing.Union[MetaOapg.properties.sensor_start_date, str, schemas.Unset] = schemas.unset,
                    sensor_end_date: typing.Union[MetaOapg.properties.sensor_end_date, str, schemas.Unset] = schemas.unset,
                    sensor_version_number: typing.Union[MetaOapg.properties.sensor_version_number, str, schemas.Unset] = schemas.unset,
                    sensor_version_comment: typing.Union[MetaOapg.properties.sensor_version_comment, str, schemas.Unset] = schemas.unset,
                    apfw_target_flg: typing.Union[MetaOapg.properties.apfw_target_flg, str, schemas.Unset] = schemas.unset,
                    apfw_status: typing.Union[MetaOapg.properties.apfw_status, str, schemas.Unset] = schemas.unset,
                    apfw_retry_count: typing.Union[MetaOapg.properties.apfw_retry_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    apfw_start_date: typing.Union[MetaOapg.properties.apfw_start_date, str, schemas.Unset] = schemas.unset,
                    apfw_end_date: typing.Union[MetaOapg.properties.apfw_end_date, str, schemas.Unset] = schemas.unset,
                    apfw_version_number: typing.Union[MetaOapg.properties.apfw_version_number, str, schemas.Unset] = schemas.unset,
                    apfw_version_comment: typing.Union[MetaOapg.properties.apfw_version_comment, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'firmware':
                    return super().__new__(
                        cls,
                        *_args,
                        sensor_loader_target_flg=sensor_loader_target_flg,
                        sensor_loader_status=sensor_loader_status,
                        sensor_loader_retry_count=sensor_loader_retry_count,
                        sensor_loader_start_date=sensor_loader_start_date,
                        sensor_loader_end_date=sensor_loader_end_date,
                        sensor_loader_version_number=sensor_loader_version_number,
                        sensor_loader_version_comment=sensor_loader_version_comment,
                        sensor_target_flg=sensor_target_flg,
                        sensor_status=sensor_status,
                        sensor_retry_count=sensor_retry_count,
                        sensor_start_date=sensor_start_date,
                        sensor_end_date=sensor_end_date,
                        sensor_version_number=sensor_version_number,
                        sensor_version_comment=sensor_version_comment,
                        apfw_target_flg=apfw_target_flg,
                        apfw_status=apfw_status,
                        apfw_retry_count=apfw_retry_count,
                        apfw_start_date=apfw_start_date,
                        apfw_end_date=apfw_end_date,
                        apfw_version_number=apfw_version_number,
                        apfw_version_comment=apfw_version_comment,
                        _configuration=_configuration,
                        **kwargs,
                    )
            update_progress = schemas.StrSchema
            deploy_comment = schemas.StrSchema
            config_id = schemas.StrSchema
            total_status = schemas.StrSchema
            app_name = schemas.StrSchema
            version_number = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "deploy_type": deploy_type,
                "deploy_status": deploy_status,
                "replace_network_id": replace_network_id,
                "current_target": current_target,
                "firmware": firmware,
                "update_progress": update_progress,
                "deploy_comment": deploy_comment,
                "config_id": config_id,
                "total_status": total_status,
                "app_name": app_name,
                "version_number": version_number,
            }
    
    ins_date: schemas.AnyTypeSchema
    upd_id: schemas.AnyTypeSchema
    replace_network_id: MetaOapg.properties.replace_network_id
    current_target: MetaOapg.properties.current_target
    upd_date: schemas.AnyTypeSchema
    model: schemas.AnyTypeSchema
    id: MetaOapg.properties.id
    deploy_status: MetaOapg.properties.deploy_status
    deploy_type: MetaOapg.properties.deploy_type
    ins_id: schemas.AnyTypeSchema
    custom_setting: schemas.AnyTypeSchema
    firmware: MetaOapg.properties.firmware
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deploy_type"]) -> MetaOapg.properties.deploy_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deploy_status"]) -> MetaOapg.properties.deploy_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replace_network_id"]) -> MetaOapg.properties.replace_network_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_target"]) -> MetaOapg.properties.current_target: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firmware"]) -> MetaOapg.properties.firmware: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_progress"]) -> MetaOapg.properties.update_progress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deploy_comment"]) -> MetaOapg.properties.deploy_comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["config_id"]) -> MetaOapg.properties.config_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_status"]) -> MetaOapg.properties.total_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_name"]) -> MetaOapg.properties.app_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version_number"]) -> MetaOapg.properties.version_number: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "deploy_type", "deploy_status", "replace_network_id", "current_target", "firmware", "update_progress", "deploy_comment", "config_id", "total_status", "app_name", "version_number", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deploy_type"]) -> MetaOapg.properties.deploy_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deploy_status"]) -> MetaOapg.properties.deploy_status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replace_network_id"]) -> MetaOapg.properties.replace_network_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_target"]) -> MetaOapg.properties.current_target: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firmware"]) -> MetaOapg.properties.firmware: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_progress"]) -> typing.Union[MetaOapg.properties.update_progress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deploy_comment"]) -> typing.Union[MetaOapg.properties.deploy_comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["config_id"]) -> typing.Union[MetaOapg.properties.config_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_status"]) -> typing.Union[MetaOapg.properties.total_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_name"]) -> typing.Union[MetaOapg.properties.app_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version_number"]) -> typing.Union[MetaOapg.properties.version_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "deploy_type", "deploy_status", "replace_network_id", "current_target", "firmware", "update_progress", "deploy_comment", "config_id", "total_status", "app_name", "version_number", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ins_date: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        upd_id: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        replace_network_id: typing.Union[MetaOapg.properties.replace_network_id, str, ],
        current_target: typing.Union[MetaOapg.properties.current_target, str, ],
        upd_date: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        model: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        deploy_status: typing.Union[MetaOapg.properties.deploy_status, str, ],
        deploy_type: typing.Union[MetaOapg.properties.deploy_type, str, ],
        ins_id: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        custom_setting: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        firmware: typing.Union[MetaOapg.properties.firmware, dict, frozendict.frozendict, ],
        update_progress: typing.Union[MetaOapg.properties.update_progress, str, schemas.Unset] = schemas.unset,
        deploy_comment: typing.Union[MetaOapg.properties.deploy_comment, str, schemas.Unset] = schemas.unset,
        config_id: typing.Union[MetaOapg.properties.config_id, str, schemas.Unset] = schemas.unset,
        total_status: typing.Union[MetaOapg.properties.total_status, str, schemas.Unset] = schemas.unset,
        app_name: typing.Union[MetaOapg.properties.app_name, str, schemas.Unset] = schemas.unset,
        version_number: typing.Union[MetaOapg.properties.version_number, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeployHistory':
        return super().__new__(
            cls,
            *_args,
            ins_date=ins_date,
            upd_id=upd_id,
            replace_network_id=replace_network_id,
            current_target=current_target,
            upd_date=upd_date,
            model=model,
            id=id,
            deploy_status=deploy_status,
            deploy_type=deploy_type,
            ins_id=ins_id,
            custom_setting=custom_setting,
            firmware=firmware,
            update_progress=update_progress,
            deploy_comment=deploy_comment,
            config_id=config_id,
            total_status=total_status,
            app_name=app_name,
            version_number=version_number,
            _configuration=_configuration,
            **kwargs,
        )
