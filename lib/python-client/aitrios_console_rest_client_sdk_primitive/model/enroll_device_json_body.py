# coding: utf-8

"""
    Console API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aitrios_console_rest_client_sdk_primitive import schemas  # noqa: F401


class EnrollDeviceJsonBody(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    EnrollDevice Json Body
    """


    class MetaOapg:
        required = {
            "device_name",
            "primary_certificate",
            "device_type",
        }
        
        class properties:
            device_name = schemas.StrSchema
            device_type = schemas.StrSchema
            primary_certificate = schemas.StrSchema
            __annotations__ = {
                "device_name": device_name,
                "device_type": device_type,
                "primary_certificate": primary_certificate,
            }
    
    device_name: MetaOapg.properties.device_name
    primary_certificate: MetaOapg.properties.primary_certificate
    device_type: MetaOapg.properties.device_type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_name"]) -> MetaOapg.properties.device_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_type"]) -> MetaOapg.properties.device_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_certificate"]) -> MetaOapg.properties.primary_certificate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["device_name", "device_type", "primary_certificate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_name"]) -> MetaOapg.properties.device_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_type"]) -> MetaOapg.properties.device_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_certificate"]) -> MetaOapg.properties.primary_certificate: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["device_name", "device_type", "primary_certificate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        device_name: typing.Union[MetaOapg.properties.device_name, str, ],
        primary_certificate: typing.Union[MetaOapg.properties.primary_certificate, str, ],
        device_type: typing.Union[MetaOapg.properties.device_type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EnrollDeviceJsonBody':
        return super().__new__(
            cls,
            *args,
            device_name=device_name,
            primary_certificate=primary_certificate,
            device_type=device_type,
            _configuration=_configuration,
            **kwargs,
        )
