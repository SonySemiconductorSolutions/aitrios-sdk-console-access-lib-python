# coding: utf-8

"""
    AITRIOS | Console

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aitrios_console_rest_client_sdk_primitive import schemas  # noqa: F401


class ModelProject(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            model_project_name = schemas.StrSchema
            model_project_id = schemas.StrSchema
            model_platform = schemas.StrSchema
            model_type = schemas.StrSchema
            project_type = schemas.StrSchema
            device_id = schemas.StrSchema
            
            
            class versions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ModelVersion']:
                        return ModelVersion
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ModelVersion'], typing.List['ModelVersion']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'versions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ModelVersion':
                    return super().__getitem__(i)
            __annotations__ = {
                "model_project_name": model_project_name,
                "model_project_id": model_project_id,
                "model_platform": model_platform,
                "model_type": model_type,
                "project_type": project_type,
                "device_id": device_id,
                "versions": versions,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_project_name"]) -> MetaOapg.properties.model_project_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_project_id"]) -> MetaOapg.properties.model_project_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_platform"]) -> MetaOapg.properties.model_platform: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_type"]) -> MetaOapg.properties.model_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project_type"]) -> MetaOapg.properties.project_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versions"]) -> MetaOapg.properties.versions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["model_project_name", "model_project_id", "model_platform", "model_type", "project_type", "device_id", "versions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_project_name"]) -> typing.Union[MetaOapg.properties.model_project_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_project_id"]) -> typing.Union[MetaOapg.properties.model_project_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_platform"]) -> typing.Union[MetaOapg.properties.model_platform, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_type"]) -> typing.Union[MetaOapg.properties.model_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project_type"]) -> typing.Union[MetaOapg.properties.project_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_id"]) -> typing.Union[MetaOapg.properties.device_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versions"]) -> typing.Union[MetaOapg.properties.versions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["model_project_name", "model_project_id", "model_platform", "model_type", "project_type", "device_id", "versions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        model_project_name: typing.Union[MetaOapg.properties.model_project_name, str, schemas.Unset] = schemas.unset,
        model_project_id: typing.Union[MetaOapg.properties.model_project_id, str, schemas.Unset] = schemas.unset,
        model_platform: typing.Union[MetaOapg.properties.model_platform, str, schemas.Unset] = schemas.unset,
        model_type: typing.Union[MetaOapg.properties.model_type, str, schemas.Unset] = schemas.unset,
        project_type: typing.Union[MetaOapg.properties.project_type, str, schemas.Unset] = schemas.unset,
        device_id: typing.Union[MetaOapg.properties.device_id, str, schemas.Unset] = schemas.unset,
        versions: typing.Union[MetaOapg.properties.versions, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelProject':
        return super().__new__(
            cls,
            *args,
            model_project_name=model_project_name,
            model_project_id=model_project_id,
            model_platform=model_platform,
            model_type=model_type,
            project_type=project_type,
            device_id=device_id,
            versions=versions,
            _configuration=_configuration,
            **kwargs,
        )

from aitrios_console_rest_client_sdk_primitive.model.model_version import ModelVersion
