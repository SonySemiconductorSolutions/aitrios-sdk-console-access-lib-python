# coding: utf-8

"""
    AITRIOS | Console

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.4.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aitrios_console_rest_client_sdk_primitive import schemas  # noqa: F401


class FWOperation(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "ErrorHandling",
        }
        
        class properties:
            
            
            class ErrorHandling(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def MANUAL_RESET(cls):
                    return cls("ManualReset")
                
                @schemas.classproperty
                def AUTO_REBOOT(cls):
                    return cls("AutoReboot")
            
            
            class OperatingMode(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def MANUAL(cls):
                    return cls("Manual")
                
                @schemas.classproperty
                def PERIODIC(cls):
                    return cls("Periodic")
            
            
            class PeriodicParameter(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "UploadInferenceParameter",
                        "PrimaryInterval",
                        "SecondaryInterval",
                    }
                    
                    class properties:
                        
                        
                        class NetworkParameter(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                            
                            @schemas.classproperty
                            def SAVE(cls):
                                return cls("Save")
                            
                            @schemas.classproperty
                            def DHCP(cls):
                                return cls("DHCP")
                        PrimaryInterval = schemas.DictSchema
                        SecondaryInterval = schemas.DictSchema
                        UploadInferenceParameter = schemas.DictSchema
                        __annotations__ = {
                            "NetworkParameter": NetworkParameter,
                            "PrimaryInterval": PrimaryInterval,
                            "SecondaryInterval": SecondaryInterval,
                            "UploadInferenceParameter": UploadInferenceParameter,
                        }
                
                UploadInferenceParameter: MetaOapg.properties.UploadInferenceParameter
                PrimaryInterval: MetaOapg.properties.PrimaryInterval
                SecondaryInterval: MetaOapg.properties.SecondaryInterval
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["NetworkParameter"]) -> MetaOapg.properties.NetworkParameter: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["PrimaryInterval"]) -> MetaOapg.properties.PrimaryInterval: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["SecondaryInterval"]) -> MetaOapg.properties.SecondaryInterval: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["UploadInferenceParameter"]) -> MetaOapg.properties.UploadInferenceParameter: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["NetworkParameter", "PrimaryInterval", "SecondaryInterval", "UploadInferenceParameter", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["NetworkParameter"]) -> typing.Union[MetaOapg.properties.NetworkParameter, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["PrimaryInterval"]) -> MetaOapg.properties.PrimaryInterval: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["SecondaryInterval"]) -> MetaOapg.properties.SecondaryInterval: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["UploadInferenceParameter"]) -> MetaOapg.properties.UploadInferenceParameter: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["NetworkParameter", "PrimaryInterval", "SecondaryInterval", "UploadInferenceParameter", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    UploadInferenceParameter: typing.Union[MetaOapg.properties.UploadInferenceParameter, dict, frozendict.frozendict, ],
                    PrimaryInterval: typing.Union[MetaOapg.properties.PrimaryInterval, dict, frozendict.frozendict, ],
                    SecondaryInterval: typing.Union[MetaOapg.properties.SecondaryInterval, dict, frozendict.frozendict, ],
                    NetworkParameter: typing.Union[MetaOapg.properties.NetworkParameter, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'PeriodicParameter':
                    return super().__new__(
                        cls,
                        *_args,
                        UploadInferenceParameter=UploadInferenceParameter,
                        PrimaryInterval=PrimaryInterval,
                        SecondaryInterval=SecondaryInterval,
                        NetworkParameter=NetworkParameter,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "ErrorHandling": ErrorHandling,
                "OperatingMode": OperatingMode,
                "PeriodicParameter": PeriodicParameter,
            }
    
    ErrorHandling: MetaOapg.properties.ErrorHandling
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ErrorHandling"]) -> MetaOapg.properties.ErrorHandling: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OperatingMode"]) -> MetaOapg.properties.OperatingMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PeriodicParameter"]) -> MetaOapg.properties.PeriodicParameter: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ErrorHandling", "OperatingMode", "PeriodicParameter", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ErrorHandling"]) -> MetaOapg.properties.ErrorHandling: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OperatingMode"]) -> typing.Union[MetaOapg.properties.OperatingMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PeriodicParameter"]) -> typing.Union[MetaOapg.properties.PeriodicParameter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ErrorHandling", "OperatingMode", "PeriodicParameter", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ErrorHandling: typing.Union[MetaOapg.properties.ErrorHandling, str, ],
        OperatingMode: typing.Union[MetaOapg.properties.OperatingMode, str, schemas.Unset] = schemas.unset,
        PeriodicParameter: typing.Union[MetaOapg.properties.PeriodicParameter, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FWOperation':
        return super().__new__(
            cls,
            *_args,
            ErrorHandling=ErrorHandling,
            OperatingMode=OperatingMode,
            PeriodicParameter=PeriodicParameter,
            _configuration=_configuration,
            **kwargs,
        )
