# coding: utf-8

"""
    AITRIOS | Console

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.4.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aitrios_console_rest_client_sdk_primitive import schemas  # noqa: F401


class DeployConfiguration(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "ins_date",
            "success_cnt",
            "upd_id",
            "config_comment",
            "config_id",
            "running_cnt",
            "upd_date",
            "fail_cnt",
            "device_type",
            "model",
            "ins_id",
            "firmware",
        }
        
        class properties:
            config_id = schemas.StrSchema
            device_type = schemas.StrSchema
            config_comment = schemas.StrSchema
            running_cnt = schemas.IntSchema
            success_cnt = schemas.IntSchema
            fail_cnt = schemas.IntSchema
            
            
            class firmware(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        sensor_loader_file_name = schemas.StrSchema
                        sensor_loader_version_number = schemas.StrSchema
                        sensor_loader_firmware_comment = schemas.StrSchema
                        sensor_file_name = schemas.StrSchema
                        sensor_version_number = schemas.StrSchema
                        sensor_firmware_comment = schemas.StrSchema
                        apfw_file_name = schemas.StrSchema
                        apfw_version_number = schemas.StrSchema
                        apfw_firmware_comment = schemas.StrSchema
                        __annotations__ = {
                            "sensor_loader_file_name": sensor_loader_file_name,
                            "sensor_loader_version_number": sensor_loader_version_number,
                            "sensor_loader_firmware_comment": sensor_loader_firmware_comment,
                            "sensor_file_name": sensor_file_name,
                            "sensor_version_number": sensor_version_number,
                            "sensor_firmware_comment": sensor_firmware_comment,
                            "apfw_file_name": apfw_file_name,
                            "apfw_version_number": apfw_version_number,
                            "apfw_firmware_comment": apfw_firmware_comment,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_loader_file_name"]) -> MetaOapg.properties.sensor_loader_file_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_loader_version_number"]) -> MetaOapg.properties.sensor_loader_version_number: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_loader_firmware_comment"]) -> MetaOapg.properties.sensor_loader_firmware_comment: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_file_name"]) -> MetaOapg.properties.sensor_file_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_version_number"]) -> MetaOapg.properties.sensor_version_number: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sensor_firmware_comment"]) -> MetaOapg.properties.sensor_firmware_comment: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["apfw_file_name"]) -> MetaOapg.properties.apfw_file_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["apfw_version_number"]) -> MetaOapg.properties.apfw_version_number: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["apfw_firmware_comment"]) -> MetaOapg.properties.apfw_firmware_comment: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["sensor_loader_file_name", "sensor_loader_version_number", "sensor_loader_firmware_comment", "sensor_file_name", "sensor_version_number", "sensor_firmware_comment", "apfw_file_name", "apfw_version_number", "apfw_firmware_comment", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_loader_file_name"]) -> typing.Union[MetaOapg.properties.sensor_loader_file_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_loader_version_number"]) -> typing.Union[MetaOapg.properties.sensor_loader_version_number, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_loader_firmware_comment"]) -> typing.Union[MetaOapg.properties.sensor_loader_firmware_comment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_file_name"]) -> typing.Union[MetaOapg.properties.sensor_file_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_version_number"]) -> typing.Union[MetaOapg.properties.sensor_version_number, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sensor_firmware_comment"]) -> typing.Union[MetaOapg.properties.sensor_firmware_comment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["apfw_file_name"]) -> typing.Union[MetaOapg.properties.apfw_file_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["apfw_version_number"]) -> typing.Union[MetaOapg.properties.apfw_version_number, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["apfw_firmware_comment"]) -> typing.Union[MetaOapg.properties.apfw_firmware_comment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sensor_loader_file_name", "sensor_loader_version_number", "sensor_loader_firmware_comment", "sensor_file_name", "sensor_version_number", "sensor_firmware_comment", "apfw_file_name", "apfw_version_number", "apfw_firmware_comment", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    sensor_loader_file_name: typing.Union[MetaOapg.properties.sensor_loader_file_name, str, schemas.Unset] = schemas.unset,
                    sensor_loader_version_number: typing.Union[MetaOapg.properties.sensor_loader_version_number, str, schemas.Unset] = schemas.unset,
                    sensor_loader_firmware_comment: typing.Union[MetaOapg.properties.sensor_loader_firmware_comment, str, schemas.Unset] = schemas.unset,
                    sensor_file_name: typing.Union[MetaOapg.properties.sensor_file_name, str, schemas.Unset] = schemas.unset,
                    sensor_version_number: typing.Union[MetaOapg.properties.sensor_version_number, str, schemas.Unset] = schemas.unset,
                    sensor_firmware_comment: typing.Union[MetaOapg.properties.sensor_firmware_comment, str, schemas.Unset] = schemas.unset,
                    apfw_file_name: typing.Union[MetaOapg.properties.apfw_file_name, str, schemas.Unset] = schemas.unset,
                    apfw_version_number: typing.Union[MetaOapg.properties.apfw_version_number, str, schemas.Unset] = schemas.unset,
                    apfw_firmware_comment: typing.Union[MetaOapg.properties.apfw_firmware_comment, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'firmware':
                    return super().__new__(
                        cls,
                        *_args,
                        sensor_loader_file_name=sensor_loader_file_name,
                        sensor_loader_version_number=sensor_loader_version_number,
                        sensor_loader_firmware_comment=sensor_loader_firmware_comment,
                        sensor_file_name=sensor_file_name,
                        sensor_version_number=sensor_version_number,
                        sensor_firmware_comment=sensor_firmware_comment,
                        apfw_file_name=apfw_file_name,
                        apfw_version_number=apfw_version_number,
                        apfw_firmware_comment=apfw_firmware_comment,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class model(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        model_id = schemas.StrSchema
                        model_version_number = schemas.StrSchema
                        model_comment = schemas.StrSchema
                        model_version_comment = schemas.StrSchema
                        __annotations__ = {
                            "model_id": model_id,
                            "model_version_number": model_version_number,
                            "model_comment": model_comment,
                            "model_version_comment": model_version_comment,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["model_id"]) -> MetaOapg.properties.model_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["model_version_number"]) -> MetaOapg.properties.model_version_number: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["model_comment"]) -> MetaOapg.properties.model_comment: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["model_version_comment"]) -> MetaOapg.properties.model_version_comment: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["model_id", "model_version_number", "model_comment", "model_version_comment", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["model_id"]) -> typing.Union[MetaOapg.properties.model_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["model_version_number"]) -> typing.Union[MetaOapg.properties.model_version_number, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["model_comment"]) -> typing.Union[MetaOapg.properties.model_comment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["model_version_comment"]) -> typing.Union[MetaOapg.properties.model_version_comment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["model_id", "model_version_number", "model_comment", "model_version_comment", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    model_id: typing.Union[MetaOapg.properties.model_id, str, schemas.Unset] = schemas.unset,
                    model_version_number: typing.Union[MetaOapg.properties.model_version_number, str, schemas.Unset] = schemas.unset,
                    model_comment: typing.Union[MetaOapg.properties.model_comment, str, schemas.Unset] = schemas.unset,
                    model_version_comment: typing.Union[MetaOapg.properties.model_version_comment, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'model':
                    return super().__new__(
                        cls,
                        *_args,
                        model_id=model_id,
                        model_version_number=model_version_number,
                        model_comment=model_comment,
                        model_version_comment=model_version_comment,
                        _configuration=_configuration,
                        **kwargs,
                    )
            ins_id = schemas.StrSchema
            ins_date = schemas.StrSchema
            upd_id = schemas.StrSchema
            upd_date = schemas.StrSchema
            __annotations__ = {
                "config_id": config_id,
                "device_type": device_type,
                "config_comment": config_comment,
                "running_cnt": running_cnt,
                "success_cnt": success_cnt,
                "fail_cnt": fail_cnt,
                "firmware": firmware,
                "model": model,
                "ins_id": ins_id,
                "ins_date": ins_date,
                "upd_id": upd_id,
                "upd_date": upd_date,
            }
    
    ins_date: MetaOapg.properties.ins_date
    success_cnt: MetaOapg.properties.success_cnt
    upd_id: MetaOapg.properties.upd_id
    config_comment: MetaOapg.properties.config_comment
    config_id: MetaOapg.properties.config_id
    running_cnt: MetaOapg.properties.running_cnt
    upd_date: MetaOapg.properties.upd_date
    fail_cnt: MetaOapg.properties.fail_cnt
    device_type: MetaOapg.properties.device_type
    model: MetaOapg.properties.model
    ins_id: MetaOapg.properties.ins_id
    firmware: MetaOapg.properties.firmware
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["config_id"]) -> MetaOapg.properties.config_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_type"]) -> MetaOapg.properties.device_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["config_comment"]) -> MetaOapg.properties.config_comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["running_cnt"]) -> MetaOapg.properties.running_cnt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["success_cnt"]) -> MetaOapg.properties.success_cnt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fail_cnt"]) -> MetaOapg.properties.fail_cnt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firmware"]) -> MetaOapg.properties.firmware: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ins_id"]) -> MetaOapg.properties.ins_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ins_date"]) -> MetaOapg.properties.ins_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upd_id"]) -> MetaOapg.properties.upd_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upd_date"]) -> MetaOapg.properties.upd_date: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["config_id", "device_type", "config_comment", "running_cnt", "success_cnt", "fail_cnt", "firmware", "model", "ins_id", "ins_date", "upd_id", "upd_date", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["config_id"]) -> MetaOapg.properties.config_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_type"]) -> MetaOapg.properties.device_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["config_comment"]) -> MetaOapg.properties.config_comment: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["running_cnt"]) -> MetaOapg.properties.running_cnt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["success_cnt"]) -> MetaOapg.properties.success_cnt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fail_cnt"]) -> MetaOapg.properties.fail_cnt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firmware"]) -> MetaOapg.properties.firmware: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ins_id"]) -> MetaOapg.properties.ins_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ins_date"]) -> MetaOapg.properties.ins_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upd_id"]) -> MetaOapg.properties.upd_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upd_date"]) -> MetaOapg.properties.upd_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["config_id", "device_type", "config_comment", "running_cnt", "success_cnt", "fail_cnt", "firmware", "model", "ins_id", "ins_date", "upd_id", "upd_date", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ins_date: typing.Union[MetaOapg.properties.ins_date, str, ],
        success_cnt: typing.Union[MetaOapg.properties.success_cnt, decimal.Decimal, int, ],
        upd_id: typing.Union[MetaOapg.properties.upd_id, str, ],
        config_comment: typing.Union[MetaOapg.properties.config_comment, str, ],
        config_id: typing.Union[MetaOapg.properties.config_id, str, ],
        running_cnt: typing.Union[MetaOapg.properties.running_cnt, decimal.Decimal, int, ],
        upd_date: typing.Union[MetaOapg.properties.upd_date, str, ],
        fail_cnt: typing.Union[MetaOapg.properties.fail_cnt, decimal.Decimal, int, ],
        device_type: typing.Union[MetaOapg.properties.device_type, str, ],
        model: typing.Union[MetaOapg.properties.model, dict, frozendict.frozendict, ],
        ins_id: typing.Union[MetaOapg.properties.ins_id, str, ],
        firmware: typing.Union[MetaOapg.properties.firmware, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeployConfiguration':
        return super().__new__(
            cls,
            *_args,
            ins_date=ins_date,
            success_cnt=success_cnt,
            upd_id=upd_id,
            config_comment=config_comment,
            config_id=config_id,
            running_cnt=running_cnt,
            upd_date=upd_date,
            fail_cnt=fail_cnt,
            device_type=device_type,
            model=model,
            ins_id=ins_id,
            firmware=firmware,
            _configuration=_configuration,
            **kwargs,
        )
