# coding: utf-8

"""
    AITRIOS | Console

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aitrios_console_rest_client_sdk_primitive import schemas  # noqa: F401


class TrainModelImportBaseModelDataImportbasemodelindtoJsonBody(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    todo
    """


    class MetaOapg:
        required = {
            "model",
            "model_id",
        }
        
        class properties:
            model_id = schemas.StrSchema
            model = schemas.StrSchema
            converted = schemas.BoolSchema
            vendor_name = schemas.StrSchema
            comment = schemas.StrSchema
            input_format_param = schemas.StrSchema
            network_config = schemas.StrSchema
            network_type = schemas.StrSchema
            
            
            class labels(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'labels':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "model_id": model_id,
                "model": model,
                "converted": converted,
                "vendor_name": vendor_name,
                "comment": comment,
                "input_format_param": input_format_param,
                "network_config": network_config,
                "network_type": network_type,
                "labels": labels,
            }
    
    model: MetaOapg.properties.model
    model_id: MetaOapg.properties.model_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_id"]) -> MetaOapg.properties.model_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["converted"]) -> MetaOapg.properties.converted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_name"]) -> MetaOapg.properties.vendor_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["input_format_param"]) -> MetaOapg.properties.input_format_param: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network_config"]) -> MetaOapg.properties.network_config: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network_type"]) -> MetaOapg.properties.network_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["model_id", "model", "converted", "vendor_name", "comment", "input_format_param", "network_config", "network_type", "labels", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_id"]) -> MetaOapg.properties.model_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["converted"]) -> typing.Union[MetaOapg.properties.converted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_name"]) -> typing.Union[MetaOapg.properties.vendor_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["input_format_param"]) -> typing.Union[MetaOapg.properties.input_format_param, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network_config"]) -> typing.Union[MetaOapg.properties.network_config, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network_type"]) -> typing.Union[MetaOapg.properties.network_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labels"]) -> typing.Union[MetaOapg.properties.labels, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["model_id", "model", "converted", "vendor_name", "comment", "input_format_param", "network_config", "network_type", "labels", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        model: typing.Union[MetaOapg.properties.model, str, ],
        model_id: typing.Union[MetaOapg.properties.model_id, str, ],
        converted: typing.Union[MetaOapg.properties.converted, bool, schemas.Unset] = schemas.unset,
        vendor_name: typing.Union[MetaOapg.properties.vendor_name, str, schemas.Unset] = schemas.unset,
        comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
        input_format_param: typing.Union[MetaOapg.properties.input_format_param, str, schemas.Unset] = schemas.unset,
        network_config: typing.Union[MetaOapg.properties.network_config, str, schemas.Unset] = schemas.unset,
        network_type: typing.Union[MetaOapg.properties.network_type, str, schemas.Unset] = schemas.unset,
        labels: typing.Union[MetaOapg.properties.labels, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TrainModelImportBaseModelDataImportbasemodelindtoJsonBody':
        return super().__new__(
            cls,
            *args,
            model=model,
            model_id=model_id,
            converted=converted,
            vendor_name=vendor_name,
            comment=comment,
            input_format_param=input_format_param,
            network_config=network_config,
            network_type=network_type,
            labels=labels,
            _configuration=_configuration,
            **kwargs,
        )
