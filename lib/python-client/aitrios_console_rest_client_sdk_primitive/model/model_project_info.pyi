# coding: utf-8

"""
    AITRIOS | Console

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.4.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aitrios_console_rest_client_sdk_primitive import schemas  # noqa: F401


class ModelProjectInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "model_project_id",
            "model_project_name",
        }
        
        class properties:
            model_project_name = schemas.StrSchema
            model_project_id = schemas.StrSchema
            model_platform = schemas.StrSchema
            model_type = schemas.StrSchema
            project_type = schemas.StrSchema
            device_id = schemas.StrSchema
            project_model_file_name = schemas.StrSchema
            project_model_accuracy = schemas.StrSchema
            project_comment = schemas.StrSchema
            
            
            class project(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        training_kit_id = schemas.StrSchema
                        training_kit_name = schemas.StrSchema
                        description = schemas.StrSchema
                        iteration_id = schemas.StrSchema
                        iteration_name = schemas.StrSchema
                        last_modified = schemas.StrSchema
                        __annotations__ = {
                            "training_kit_id": training_kit_id,
                            "training_kit_name": training_kit_name,
                            "description": description,
                            "iteration_id": iteration_id,
                            "iteration_name": iteration_name,
                            "last_modified": last_modified,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["training_kit_id"]) -> MetaOapg.properties.training_kit_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["training_kit_name"]) -> MetaOapg.properties.training_kit_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["iteration_id"]) -> MetaOapg.properties.iteration_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["iteration_name"]) -> MetaOapg.properties.iteration_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["last_modified"]) -> MetaOapg.properties.last_modified: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["training_kit_id", "training_kit_name", "description", "iteration_id", "iteration_name", "last_modified", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["training_kit_id"]) -> typing.Union[MetaOapg.properties.training_kit_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["training_kit_name"]) -> typing.Union[MetaOapg.properties.training_kit_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["iteration_id"]) -> typing.Union[MetaOapg.properties.iteration_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["iteration_name"]) -> typing.Union[MetaOapg.properties.iteration_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["last_modified"]) -> typing.Union[MetaOapg.properties.last_modified, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["training_kit_id", "training_kit_name", "description", "iteration_id", "iteration_name", "last_modified", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    training_kit_id: typing.Union[MetaOapg.properties.training_kit_id, str, schemas.Unset] = schemas.unset,
                    training_kit_name: typing.Union[MetaOapg.properties.training_kit_name, str, schemas.Unset] = schemas.unset,
                    description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
                    iteration_id: typing.Union[MetaOapg.properties.iteration_id, str, schemas.Unset] = schemas.unset,
                    iteration_name: typing.Union[MetaOapg.properties.iteration_name, str, schemas.Unset] = schemas.unset,
                    last_modified: typing.Union[MetaOapg.properties.last_modified, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'project':
                    return super().__new__(
                        cls,
                        *_args,
                        training_kit_id=training_kit_id,
                        training_kit_name=training_kit_name,
                        description=description,
                        iteration_id=iteration_id,
                        iteration_name=iteration_name,
                        last_modified=last_modified,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class model(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        model_id = schemas.StrSchema
                        model_type = schemas.StrSchema
                        functionality = schemas.StrSchema
                        vendor_name = schemas.StrSchema
                        model_comment = schemas.StrSchema
                        create_by = schemas.StrSchema
                        package_id = schemas.StrSchema
                        product_id = schemas.StrSchema
                        metadata_format_id = schemas.StrSchema
                    
                        @staticmethod
                        def latest_version() -> typing.Type['ModelVersionJsonBody']:
                            return ModelVersionJsonBody
                        __annotations__ = {
                            "model_id": model_id,
                            "model_type": model_type,
                            "functionality": functionality,
                            "vendor_name": vendor_name,
                            "model_comment": model_comment,
                            "create_by": create_by,
                            "package_id": package_id,
                            "product_id": product_id,
                            "metadata_format_id": metadata_format_id,
                            "latest_version": latest_version,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["model_id"]) -> MetaOapg.properties.model_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["model_type"]) -> MetaOapg.properties.model_type: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["functionality"]) -> MetaOapg.properties.functionality: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["vendor_name"]) -> MetaOapg.properties.vendor_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["model_comment"]) -> MetaOapg.properties.model_comment: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["create_by"]) -> MetaOapg.properties.create_by: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["package_id"]) -> MetaOapg.properties.package_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["product_id"]) -> MetaOapg.properties.product_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["metadata_format_id"]) -> MetaOapg.properties.metadata_format_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["latest_version"]) -> 'ModelVersionJsonBody': ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["model_id", "model_type", "functionality", "vendor_name", "model_comment", "create_by", "package_id", "product_id", "metadata_format_id", "latest_version", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["model_id"]) -> typing.Union[MetaOapg.properties.model_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["model_type"]) -> typing.Union[MetaOapg.properties.model_type, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["functionality"]) -> typing.Union[MetaOapg.properties.functionality, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["vendor_name"]) -> typing.Union[MetaOapg.properties.vendor_name, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["model_comment"]) -> typing.Union[MetaOapg.properties.model_comment, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["create_by"]) -> typing.Union[MetaOapg.properties.create_by, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["package_id"]) -> typing.Union[MetaOapg.properties.package_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["product_id"]) -> typing.Union[MetaOapg.properties.product_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["metadata_format_id"]) -> typing.Union[MetaOapg.properties.metadata_format_id, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["latest_version"]) -> typing.Union['ModelVersionJsonBody', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["model_id", "model_type", "functionality", "vendor_name", "model_comment", "create_by", "package_id", "product_id", "metadata_format_id", "latest_version", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    model_id: typing.Union[MetaOapg.properties.model_id, str, schemas.Unset] = schemas.unset,
                    model_type: typing.Union[MetaOapg.properties.model_type, str, schemas.Unset] = schemas.unset,
                    functionality: typing.Union[MetaOapg.properties.functionality, str, schemas.Unset] = schemas.unset,
                    vendor_name: typing.Union[MetaOapg.properties.vendor_name, str, schemas.Unset] = schemas.unset,
                    model_comment: typing.Union[MetaOapg.properties.model_comment, str, schemas.Unset] = schemas.unset,
                    create_by: typing.Union[MetaOapg.properties.create_by, str, schemas.Unset] = schemas.unset,
                    package_id: typing.Union[MetaOapg.properties.package_id, str, schemas.Unset] = schemas.unset,
                    product_id: typing.Union[MetaOapg.properties.product_id, str, schemas.Unset] = schemas.unset,
                    metadata_format_id: typing.Union[MetaOapg.properties.metadata_format_id, str, schemas.Unset] = schemas.unset,
                    latest_version: typing.Union['ModelVersionJsonBody', schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'model':
                    return super().__new__(
                        cls,
                        *_args,
                        model_id=model_id,
                        model_type=model_type,
                        functionality=functionality,
                        vendor_name=vendor_name,
                        model_comment=model_comment,
                        create_by=create_by,
                        package_id=package_id,
                        product_id=product_id,
                        metadata_format_id=metadata_format_id,
                        latest_version=latest_version,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "model_project_name": model_project_name,
                "model_project_id": model_project_id,
                "model_platform": model_platform,
                "model_type": model_type,
                "project_type": project_type,
                "device_id": device_id,
                "project_model_file_name": project_model_file_name,
                "project_model_accuracy": project_model_accuracy,
                "project_comment": project_comment,
                "project": project,
                "model": model,
            }
    
    model_project_id: MetaOapg.properties.model_project_id
    model_project_name: MetaOapg.properties.model_project_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_project_name"]) -> MetaOapg.properties.model_project_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_project_id"]) -> MetaOapg.properties.model_project_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_platform"]) -> MetaOapg.properties.model_platform: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_type"]) -> MetaOapg.properties.model_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project_type"]) -> MetaOapg.properties.project_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project_model_file_name"]) -> MetaOapg.properties.project_model_file_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project_model_accuracy"]) -> MetaOapg.properties.project_model_accuracy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project_comment"]) -> MetaOapg.properties.project_comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project"]) -> MetaOapg.properties.project: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["model_project_name", "model_project_id", "model_platform", "model_type", "project_type", "device_id", "project_model_file_name", "project_model_accuracy", "project_comment", "project", "model", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_project_name"]) -> MetaOapg.properties.model_project_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_project_id"]) -> MetaOapg.properties.model_project_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_platform"]) -> typing.Union[MetaOapg.properties.model_platform, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_type"]) -> typing.Union[MetaOapg.properties.model_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project_type"]) -> typing.Union[MetaOapg.properties.project_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_id"]) -> typing.Union[MetaOapg.properties.device_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project_model_file_name"]) -> typing.Union[MetaOapg.properties.project_model_file_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project_model_accuracy"]) -> typing.Union[MetaOapg.properties.project_model_accuracy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project_comment"]) -> typing.Union[MetaOapg.properties.project_comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project"]) -> typing.Union[MetaOapg.properties.project, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> typing.Union[MetaOapg.properties.model, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["model_project_name", "model_project_id", "model_platform", "model_type", "project_type", "device_id", "project_model_file_name", "project_model_accuracy", "project_comment", "project", "model", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        model_project_id: typing.Union[MetaOapg.properties.model_project_id, str, ],
        model_project_name: typing.Union[MetaOapg.properties.model_project_name, str, ],
        model_platform: typing.Union[MetaOapg.properties.model_platform, str, schemas.Unset] = schemas.unset,
        model_type: typing.Union[MetaOapg.properties.model_type, str, schemas.Unset] = schemas.unset,
        project_type: typing.Union[MetaOapg.properties.project_type, str, schemas.Unset] = schemas.unset,
        device_id: typing.Union[MetaOapg.properties.device_id, str, schemas.Unset] = schemas.unset,
        project_model_file_name: typing.Union[MetaOapg.properties.project_model_file_name, str, schemas.Unset] = schemas.unset,
        project_model_accuracy: typing.Union[MetaOapg.properties.project_model_accuracy, str, schemas.Unset] = schemas.unset,
        project_comment: typing.Union[MetaOapg.properties.project_comment, str, schemas.Unset] = schemas.unset,
        project: typing.Union[MetaOapg.properties.project, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        model: typing.Union[MetaOapg.properties.model, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelProjectInfo':
        return super().__new__(
            cls,
            *_args,
            model_project_id=model_project_id,
            model_project_name=model_project_name,
            model_platform=model_platform,
            model_type=model_type,
            project_type=project_type,
            device_id=device_id,
            project_model_file_name=project_model_file_name,
            project_model_accuracy=project_model_accuracy,
            project_comment=project_comment,
            project=project,
            model=model,
            _configuration=_configuration,
            **kwargs,
        )

from aitrios_console_rest_client_sdk_primitive.model.model_version_json_body import ModelVersionJsonBody
