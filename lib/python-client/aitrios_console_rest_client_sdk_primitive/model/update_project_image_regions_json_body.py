# coding: utf-8

"""
    AITRIOS | Console

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.4.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aitrios_console_rest_client_sdk_primitive import schemas  # noqa: F401


class UpdateProjectImageRegionsJsonBody(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    UpdateProjectImageRegions JsonBody.
    """


    class MetaOapg:
        
        class properties:
            
            
            class regions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "image_id",
                            }
                            
                            class properties:
                                image_id = schemas.StrSchema
                                tag_id = schemas.StrSchema
                                tag_name = schemas.StrSchema
                                left = schemas.StrSchema
                                top = schemas.StrSchema
                                width = schemas.StrSchema
                                height = schemas.StrSchema
                                __annotations__ = {
                                    "image_id": image_id,
                                    "tag_id": tag_id,
                                    "tag_name": tag_name,
                                    "left": left,
                                    "top": top,
                                    "width": width,
                                    "height": height,
                                }
                        
                        image_id: MetaOapg.properties.image_id
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["image_id"]) -> MetaOapg.properties.image_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["tag_id"]) -> MetaOapg.properties.tag_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["tag_name"]) -> MetaOapg.properties.tag_name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["left"]) -> MetaOapg.properties.left: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["top"]) -> MetaOapg.properties.top: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["height"]) -> MetaOapg.properties.height: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["image_id", "tag_id", "tag_name", "left", "top", "width", "height", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["image_id"]) -> MetaOapg.properties.image_id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["tag_id"]) -> typing.Union[MetaOapg.properties.tag_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["tag_name"]) -> typing.Union[MetaOapg.properties.tag_name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["left"]) -> typing.Union[MetaOapg.properties.left, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["top"]) -> typing.Union[MetaOapg.properties.top, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["width"]) -> typing.Union[MetaOapg.properties.width, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["height"]) -> typing.Union[MetaOapg.properties.height, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["image_id", "tag_id", "tag_name", "left", "top", "width", "height", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            image_id: typing.Union[MetaOapg.properties.image_id, str, ],
                            tag_id: typing.Union[MetaOapg.properties.tag_id, str, schemas.Unset] = schemas.unset,
                            tag_name: typing.Union[MetaOapg.properties.tag_name, str, schemas.Unset] = schemas.unset,
                            left: typing.Union[MetaOapg.properties.left, str, schemas.Unset] = schemas.unset,
                            top: typing.Union[MetaOapg.properties.top, str, schemas.Unset] = schemas.unset,
                            width: typing.Union[MetaOapg.properties.width, str, schemas.Unset] = schemas.unset,
                            height: typing.Union[MetaOapg.properties.height, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                image_id=image_id,
                                tag_id=tag_id,
                                tag_name=tag_name,
                                left=left,
                                top=top,
                                width=width,
                                height=height,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'regions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "regions": regions,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["regions"]) -> MetaOapg.properties.regions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["regions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["regions"]) -> typing.Union[MetaOapg.properties.regions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["regions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        regions: typing.Union[MetaOapg.properties.regions, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdateProjectImageRegionsJsonBody':
        return super().__new__(
            cls,
            *_args,
            regions=regions,
            _configuration=_configuration,
            **kwargs,
        )
