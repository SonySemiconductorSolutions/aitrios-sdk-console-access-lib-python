# coding: utf-8

"""
    Console API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aitrios_console_rest_client_sdk_primitive import schemas  # noqa: F401


class TrainModelUpdateBaseModelVersionDataUpdatebasemodelversionindtoJsonBody(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Update Base Model API json_body class.

Attributes:
----------
comment(str): comment.
network_parameter(str): network_parameter file name.
network_config(str): network_config file name.
    """


    class MetaOapg:
        
        class properties:
            comment = schemas.StrSchema
            network_parameter = schemas.StrSchema
            network_config = schemas.StrSchema
            __annotations__ = {
                "comment": comment,
                "network_parameter": network_parameter,
                "network_config": network_config,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network_parameter"]) -> MetaOapg.properties.network_parameter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network_config"]) -> MetaOapg.properties.network_config: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["comment", "network_parameter", "network_config", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network_parameter"]) -> typing.Union[MetaOapg.properties.network_parameter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network_config"]) -> typing.Union[MetaOapg.properties.network_config, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["comment", "network_parameter", "network_config", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
        network_parameter: typing.Union[MetaOapg.properties.network_parameter, str, schemas.Unset] = schemas.unset,
        network_config: typing.Union[MetaOapg.properties.network_config, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TrainModelUpdateBaseModelVersionDataUpdatebasemodelversionindtoJsonBody':
        return super().__new__(
            cls,
            *args,
            comment=comment,
            network_parameter=network_parameter,
            network_config=network_config,
            _configuration=_configuration,
            **kwargs,
        )
