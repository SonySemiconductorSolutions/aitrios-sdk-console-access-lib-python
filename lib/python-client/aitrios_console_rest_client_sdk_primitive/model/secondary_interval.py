# coding: utf-8

"""
    AITRIOS | Console

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.4.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aitrios_console_rest_client_sdk_primitive import schemas  # noqa: F401


class SecondaryInterval(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "BaseTime",
        }
        
        class properties:
            BaseTime = schemas.StrSchema
            ConfigInterval = schemas.IntSchema
            CaptureInterval = schemas.IntSchema
            UploadCount = schemas.IntSchema
            __annotations__ = {
                "BaseTime": BaseTime,
                "ConfigInterval": ConfigInterval,
                "CaptureInterval": CaptureInterval,
                "UploadCount": UploadCount,
            }
    
    BaseTime: MetaOapg.properties.BaseTime
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BaseTime"]) -> MetaOapg.properties.BaseTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ConfigInterval"]) -> MetaOapg.properties.ConfigInterval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CaptureInterval"]) -> MetaOapg.properties.CaptureInterval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UploadCount"]) -> MetaOapg.properties.UploadCount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["BaseTime", "ConfigInterval", "CaptureInterval", "UploadCount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BaseTime"]) -> MetaOapg.properties.BaseTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ConfigInterval"]) -> typing.Union[MetaOapg.properties.ConfigInterval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CaptureInterval"]) -> typing.Union[MetaOapg.properties.CaptureInterval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UploadCount"]) -> typing.Union[MetaOapg.properties.UploadCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["BaseTime", "ConfigInterval", "CaptureInterval", "UploadCount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        BaseTime: typing.Union[MetaOapg.properties.BaseTime, str, ],
        ConfigInterval: typing.Union[MetaOapg.properties.ConfigInterval, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        CaptureInterval: typing.Union[MetaOapg.properties.CaptureInterval, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        UploadCount: typing.Union[MetaOapg.properties.UploadCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SecondaryInterval':
        return super().__new__(
            cls,
            *_args,
            BaseTime=BaseTime,
            ConfigInterval=ConfigInterval,
            CaptureInterval=CaptureInterval,
            UploadCount=UploadCount,
            _configuration=_configuration,
            **kwargs,
        )
