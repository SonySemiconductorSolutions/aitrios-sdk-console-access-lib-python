# coding: utf-8

"""
    AITRIOS | Console

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.4.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aitrios_console_rest_client_sdk_primitive import schemas  # noqa: F401


class AWS(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "access_key_id",
            "endpoint",
            "bucket_name",
            "secret_access_key",
            "region",
            "type",
        }
        
        class properties:
            type = schemas.StrSchema
            endpoint = schemas.StrSchema
            region = schemas.StrSchema
            bucket_name = schemas.StrSchema
            secret_access_key = schemas.StrSchema
            access_key_id = schemas.StrSchema
            mode = schemas.IntSchema
            __annotations__ = {
                "type": type,
                "endpoint": endpoint,
                "region": region,
                "bucket_name": bucket_name,
                "secret_access_key": secret_access_key,
                "access_key_id": access_key_id,
                "mode": mode,
            }
    
    access_key_id: MetaOapg.properties.access_key_id
    endpoint: MetaOapg.properties.endpoint
    bucket_name: MetaOapg.properties.bucket_name
    secret_access_key: MetaOapg.properties.secret_access_key
    region: MetaOapg.properties.region
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endpoint"]) -> MetaOapg.properties.endpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bucket_name"]) -> MetaOapg.properties.bucket_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret_access_key"]) -> MetaOapg.properties.secret_access_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_key_id"]) -> MetaOapg.properties.access_key_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mode"]) -> MetaOapg.properties.mode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "endpoint", "region", "bucket_name", "secret_access_key", "access_key_id", "mode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endpoint"]) -> MetaOapg.properties.endpoint: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bucket_name"]) -> MetaOapg.properties.bucket_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret_access_key"]) -> MetaOapg.properties.secret_access_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_key_id"]) -> MetaOapg.properties.access_key_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mode"]) -> typing.Union[MetaOapg.properties.mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "endpoint", "region", "bucket_name", "secret_access_key", "access_key_id", "mode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        access_key_id: typing.Union[MetaOapg.properties.access_key_id, str, ],
        endpoint: typing.Union[MetaOapg.properties.endpoint, str, ],
        bucket_name: typing.Union[MetaOapg.properties.bucket_name, str, ],
        secret_access_key: typing.Union[MetaOapg.properties.secret_access_key, str, ],
        region: typing.Union[MetaOapg.properties.region, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        mode: typing.Union[MetaOapg.properties.mode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AWS':
        return super().__new__(
            cls,
            *_args,
            access_key_id=access_key_id,
            endpoint=endpoint,
            bucket_name=bucket_name,
            secret_access_key=secret_access_key,
            region=region,
            type=type,
            mode=mode,
            _configuration=_configuration,
            **kwargs,
        )
