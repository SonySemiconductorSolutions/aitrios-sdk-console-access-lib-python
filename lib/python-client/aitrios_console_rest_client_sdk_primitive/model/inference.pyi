# coding: utf-8

"""
    Console API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.0.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aitrios_console_rest_client_sdk_primitive import schemas  # noqa: F401


class Inference(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class _1(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        C = schemas.NumberSchema
                        P = schemas.NumberSchema
                        X = schemas.NumberSchema
                        Y = schemas.NumberSchema
                        x = schemas.NumberSchema
                        y = schemas.NumberSchema
                        __annotations__ = {
                            "C": C,
                            "P": P,
                            "X": X,
                            "Y": Y,
                            "x": x,
                            "y": y,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["C"]) -> MetaOapg.properties.C: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["P"]) -> MetaOapg.properties.P: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["X"]) -> MetaOapg.properties.X: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Y"]) -> MetaOapg.properties.Y: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["C", "P", "X", "Y", "x", "y", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["C"]) -> typing.Union[MetaOapg.properties.C, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["P"]) -> typing.Union[MetaOapg.properties.P, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["X"]) -> typing.Union[MetaOapg.properties.X, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Y"]) -> typing.Union[MetaOapg.properties.Y, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["x"]) -> typing.Union[MetaOapg.properties.x, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["y"]) -> typing.Union[MetaOapg.properties.y, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["C", "P", "X", "Y", "x", "y", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    C: typing.Union[MetaOapg.properties.C, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    P: typing.Union[MetaOapg.properties.P, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    X: typing.Union[MetaOapg.properties.X, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Y: typing.Union[MetaOapg.properties.Y, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    x: typing.Union[MetaOapg.properties.x, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    y: typing.Union[MetaOapg.properties.y, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> '_1':
                    return super().__new__(
                        cls,
                        *args,
                        C=C,
                        P=P,
                        X=X,
                        Y=Y,
                        x=x,
                        y=y,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class _2(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        C = schemas.NumberSchema
                        P = schemas.NumberSchema
                        X = schemas.NumberSchema
                        Y = schemas.NumberSchema
                        x = schemas.NumberSchema
                        y = schemas.NumberSchema
                        __annotations__ = {
                            "C": C,
                            "P": P,
                            "X": X,
                            "Y": Y,
                            "x": x,
                            "y": y,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["C"]) -> MetaOapg.properties.C: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["P"]) -> MetaOapg.properties.P: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["X"]) -> MetaOapg.properties.X: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Y"]) -> MetaOapg.properties.Y: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["C", "P", "X", "Y", "x", "y", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["C"]) -> typing.Union[MetaOapg.properties.C, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["P"]) -> typing.Union[MetaOapg.properties.P, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["X"]) -> typing.Union[MetaOapg.properties.X, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Y"]) -> typing.Union[MetaOapg.properties.Y, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["x"]) -> typing.Union[MetaOapg.properties.x, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["y"]) -> typing.Union[MetaOapg.properties.y, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["C", "P", "X", "Y", "x", "y", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    C: typing.Union[MetaOapg.properties.C, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    P: typing.Union[MetaOapg.properties.P, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    X: typing.Union[MetaOapg.properties.X, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Y: typing.Union[MetaOapg.properties.Y, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    x: typing.Union[MetaOapg.properties.x, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    y: typing.Union[MetaOapg.properties.y, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> '_2':
                    return super().__new__(
                        cls,
                        *args,
                        C=C,
                        P=P,
                        X=X,
                        Y=Y,
                        x=x,
                        y=y,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class _3(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        C = schemas.NumberSchema
                        P = schemas.NumberSchema
                        X = schemas.NumberSchema
                        Y = schemas.NumberSchema
                        x = schemas.NumberSchema
                        y = schemas.NumberSchema
                        __annotations__ = {
                            "C": C,
                            "P": P,
                            "X": X,
                            "Y": Y,
                            "x": x,
                            "y": y,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["C"]) -> MetaOapg.properties.C: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["P"]) -> MetaOapg.properties.P: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["X"]) -> MetaOapg.properties.X: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Y"]) -> MetaOapg.properties.Y: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["C", "P", "X", "Y", "x", "y", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["C"]) -> typing.Union[MetaOapg.properties.C, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["P"]) -> typing.Union[MetaOapg.properties.P, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["X"]) -> typing.Union[MetaOapg.properties.X, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Y"]) -> typing.Union[MetaOapg.properties.Y, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["x"]) -> typing.Union[MetaOapg.properties.x, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["y"]) -> typing.Union[MetaOapg.properties.y, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["C", "P", "X", "Y", "x", "y", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    C: typing.Union[MetaOapg.properties.C, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    P: typing.Union[MetaOapg.properties.P, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    X: typing.Union[MetaOapg.properties.X, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Y: typing.Union[MetaOapg.properties.Y, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    x: typing.Union[MetaOapg.properties.x, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    y: typing.Union[MetaOapg.properties.y, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> '_3':
                    return super().__new__(
                        cls,
                        *args,
                        C=C,
                        P=P,
                        X=X,
                        Y=Y,
                        x=x,
                        y=y,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class _4(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        C = schemas.NumberSchema
                        P = schemas.NumberSchema
                        X = schemas.NumberSchema
                        Y = schemas.NumberSchema
                        x = schemas.NumberSchema
                        y = schemas.NumberSchema
                        __annotations__ = {
                            "C": C,
                            "P": P,
                            "X": X,
                            "Y": Y,
                            "x": x,
                            "y": y,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["C"]) -> MetaOapg.properties.C: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["P"]) -> MetaOapg.properties.P: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["X"]) -> MetaOapg.properties.X: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Y"]) -> MetaOapg.properties.Y: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["C", "P", "X", "Y", "x", "y", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["C"]) -> typing.Union[MetaOapg.properties.C, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["P"]) -> typing.Union[MetaOapg.properties.P, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["X"]) -> typing.Union[MetaOapg.properties.X, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Y"]) -> typing.Union[MetaOapg.properties.Y, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["x"]) -> typing.Union[MetaOapg.properties.x, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["y"]) -> typing.Union[MetaOapg.properties.y, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["C", "P", "X", "Y", "x", "y", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    C: typing.Union[MetaOapg.properties.C, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    P: typing.Union[MetaOapg.properties.P, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    X: typing.Union[MetaOapg.properties.X, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Y: typing.Union[MetaOapg.properties.Y, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    x: typing.Union[MetaOapg.properties.x, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    y: typing.Union[MetaOapg.properties.y, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> '_4':
                    return super().__new__(
                        cls,
                        *args,
                        C=C,
                        P=P,
                        X=X,
                        Y=Y,
                        x=x,
                        y=y,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class _5(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        C = schemas.NumberSchema
                        P = schemas.NumberSchema
                        X = schemas.NumberSchema
                        Y = schemas.NumberSchema
                        x = schemas.NumberSchema
                        y = schemas.NumberSchema
                        __annotations__ = {
                            "C": C,
                            "P": P,
                            "X": X,
                            "Y": Y,
                            "x": x,
                            "y": y,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["C"]) -> MetaOapg.properties.C: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["P"]) -> MetaOapg.properties.P: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["X"]) -> MetaOapg.properties.X: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Y"]) -> MetaOapg.properties.Y: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["C", "P", "X", "Y", "x", "y", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["C"]) -> typing.Union[MetaOapg.properties.C, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["P"]) -> typing.Union[MetaOapg.properties.P, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["X"]) -> typing.Union[MetaOapg.properties.X, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Y"]) -> typing.Union[MetaOapg.properties.Y, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["x"]) -> typing.Union[MetaOapg.properties.x, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["y"]) -> typing.Union[MetaOapg.properties.y, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["C", "P", "X", "Y", "x", "y", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    C: typing.Union[MetaOapg.properties.C, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    P: typing.Union[MetaOapg.properties.P, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    X: typing.Union[MetaOapg.properties.X, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    Y: typing.Union[MetaOapg.properties.Y, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    x: typing.Union[MetaOapg.properties.x, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    y: typing.Union[MetaOapg.properties.y, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> '_5':
                    return super().__new__(
                        cls,
                        *args,
                        C=C,
                        P=P,
                        X=X,
                        Y=Y,
                        x=x,
                        y=y,
                        _configuration=_configuration,
                        **kwargs,
                    )
            T = schemas.StrSchema
            O = schemas.StrSchema
            __annotations__ = {
                "1": _1,
                "2": _2,
                "3": _3,
                "4": _4,
                "5": _5,
                "T": T,
                "O": O,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["1"]) -> MetaOapg.properties._1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["2"]) -> MetaOapg.properties._2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["3"]) -> MetaOapg.properties._3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["4"]) -> MetaOapg.properties._4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["5"]) -> MetaOapg.properties._5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["T"]) -> MetaOapg.properties.T: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["O"]) -> MetaOapg.properties.O: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["1", "2", "3", "4", "5", "T", "O", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["1"]) -> typing.Union[MetaOapg.properties._1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["2"]) -> typing.Union[MetaOapg.properties._2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["3"]) -> typing.Union[MetaOapg.properties._3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["4"]) -> typing.Union[MetaOapg.properties._4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["5"]) -> typing.Union[MetaOapg.properties._5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["T"]) -> typing.Union[MetaOapg.properties.T, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["O"]) -> typing.Union[MetaOapg.properties.O, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["1", "2", "3", "4", "5", "T", "O", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        T: typing.Union[MetaOapg.properties.T, str, schemas.Unset] = schemas.unset,
        O: typing.Union[MetaOapg.properties.O, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Inference':
        return super().__new__(
            cls,
            *args,
            T=T,
            O=O,
            _configuration=_configuration,
            **kwargs,
        )
