# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from aitrios_console_rest_client_sdk_primitive import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aitrios_console_rest_client_sdk_primitive import schemas  # noqa: F401

from aitrios_console_rest_client_sdk_primitive.model.error_response import ErrorResponse

from . import path

# query params
ConfigIdSchema = schemas.StrSchema
CommentSchema = schemas.StrSchema
DeviceTypeSchema = schemas.StrSchema
SensorLoaderVersionNumberSchema = schemas.StrSchema
SensorVersionNumberSchema = schemas.StrSchema
ModelIdSchema = schemas.StrSchema
ModelVersionNumberSchema = schemas.StrSchema
ColorMatrixModeSchema = schemas.StrSchema
ColorMatrixFileNameSchema = schemas.StrSchema
GammaModeSchema = schemas.StrSchema
GammaFileNameSchema = schemas.StrSchema
LscispModeSchema = schemas.StrSchema
LscispFileNameSchema = schemas.StrSchema
LscrawModeSchema = schemas.StrSchema
LscrawFileNameSchema = schemas.StrSchema
PrewbModeSchema = schemas.StrSchema
PrewbFileNameSchema = schemas.StrSchema
DewarpModeSchema = schemas.StrSchema
DewarpFileNameSchema = schemas.StrSchema
ApFwVersionNumberSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
        'config_id': typing.Union[ConfigIdSchema, str, ],
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'comment': typing.Union[CommentSchema, str, ],
        'device_type': typing.Union[DeviceTypeSchema, str, ],
        'sensor_loader_version_number': typing.Union[SensorLoaderVersionNumberSchema, str, ],
        'sensor_version_number': typing.Union[SensorVersionNumberSchema, str, ],
        'model_id': typing.Union[ModelIdSchema, str, ],
        'model_version_number': typing.Union[ModelVersionNumberSchema, str, ],
        'color_matrix_mode': typing.Union[ColorMatrixModeSchema, str, ],
        'color_matrix_file_name': typing.Union[ColorMatrixFileNameSchema, str, ],
        'gamma_mode': typing.Union[GammaModeSchema, str, ],
        'gamma_file_name': typing.Union[GammaFileNameSchema, str, ],
        'lscisp_mode': typing.Union[LscispModeSchema, str, ],
        'lscisp_file_name': typing.Union[LscispFileNameSchema, str, ],
        'lscraw_mode': typing.Union[LscrawModeSchema, str, ],
        'lscraw_file_name': typing.Union[LscrawFileNameSchema, str, ],
        'prewb_mode': typing.Union[PrewbModeSchema, str, ],
        'prewb_file_name': typing.Union[PrewbFileNameSchema, str, ],
        'dewarp_mode': typing.Union[DewarpModeSchema, str, ],
        'dewarp_file_name': typing.Union[DewarpFileNameSchema, str, ],
        'ap_fw_version_number': typing.Union[ApFwVersionNumberSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_config_id = api_client.QueryParameter(
    name="config_id",
    style=api_client.ParameterStyle.FORM,
    schema=ConfigIdSchema,
    required=True,
    explode=True,
)
request_query_comment = api_client.QueryParameter(
    name="comment",
    style=api_client.ParameterStyle.FORM,
    schema=CommentSchema,
    explode=True,
)
request_query_device_type = api_client.QueryParameter(
    name="device_type",
    style=api_client.ParameterStyle.FORM,
    schema=DeviceTypeSchema,
    explode=True,
)
request_query_sensor_loader_version_number = api_client.QueryParameter(
    name="sensor_loader_version_number",
    style=api_client.ParameterStyle.FORM,
    schema=SensorLoaderVersionNumberSchema,
    explode=True,
)
request_query_sensor_version_number = api_client.QueryParameter(
    name="sensor_version_number",
    style=api_client.ParameterStyle.FORM,
    schema=SensorVersionNumberSchema,
    explode=True,
)
request_query_model_id = api_client.QueryParameter(
    name="model_id",
    style=api_client.ParameterStyle.FORM,
    schema=ModelIdSchema,
    explode=True,
)
request_query_model_version_number = api_client.QueryParameter(
    name="model_version_number",
    style=api_client.ParameterStyle.FORM,
    schema=ModelVersionNumberSchema,
    explode=True,
)
request_query_color_matrix_mode = api_client.QueryParameter(
    name="color_matrix_mode",
    style=api_client.ParameterStyle.FORM,
    schema=ColorMatrixModeSchema,
    explode=True,
)
request_query_color_matrix_file_name = api_client.QueryParameter(
    name="color_matrix_file_name",
    style=api_client.ParameterStyle.FORM,
    schema=ColorMatrixFileNameSchema,
    explode=True,
)
request_query_gamma_mode = api_client.QueryParameter(
    name="gamma_mode",
    style=api_client.ParameterStyle.FORM,
    schema=GammaModeSchema,
    explode=True,
)
request_query_gamma_file_name = api_client.QueryParameter(
    name="gamma_file_name",
    style=api_client.ParameterStyle.FORM,
    schema=GammaFileNameSchema,
    explode=True,
)
request_query_lscisp_mode = api_client.QueryParameter(
    name="lscisp_mode",
    style=api_client.ParameterStyle.FORM,
    schema=LscispModeSchema,
    explode=True,
)
request_query_lscisp_file_name = api_client.QueryParameter(
    name="lscisp_file_name",
    style=api_client.ParameterStyle.FORM,
    schema=LscispFileNameSchema,
    explode=True,
)
request_query_lscraw_mode = api_client.QueryParameter(
    name="lscraw_mode",
    style=api_client.ParameterStyle.FORM,
    schema=LscrawModeSchema,
    explode=True,
)
request_query_lscraw_file_name = api_client.QueryParameter(
    name="lscraw_file_name",
    style=api_client.ParameterStyle.FORM,
    schema=LscrawFileNameSchema,
    explode=True,
)
request_query_prewb_mode = api_client.QueryParameter(
    name="prewb_mode",
    style=api_client.ParameterStyle.FORM,
    schema=PrewbModeSchema,
    explode=True,
)
request_query_prewb_file_name = api_client.QueryParameter(
    name="prewb_file_name",
    style=api_client.ParameterStyle.FORM,
    schema=PrewbFileNameSchema,
    explode=True,
)
request_query_dewarp_mode = api_client.QueryParameter(
    name="dewarp_mode",
    style=api_client.ParameterStyle.FORM,
    schema=DewarpModeSchema,
    explode=True,
)
request_query_dewarp_file_name = api_client.QueryParameter(
    name="dewarp_file_name",
    style=api_client.ParameterStyle.FORM,
    schema=DewarpFileNameSchema,
    explode=True,
)
request_query_ap_fw_version_number = api_client.QueryParameter(
    name="ap_fw_version_number",
    style=api_client.ParameterStyle.FORM,
    schema=ApFwVersionNumberSchema,
    explode=True,
)
SchemaFor200ResponseBodyApplicationJson = schemas.AnyTypeSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = ErrorResponse


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor400ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
SchemaFor401ResponseBodyApplicationJson = ErrorResponse


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor401ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJson),
    },
)
SchemaFor403ResponseBodyApplicationJson = ErrorResponse


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor403ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor403ResponseBodyApplicationJson),
    },
)
SchemaFor500ResponseBodyApplicationJson = ErrorResponse


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor500ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
SchemaFor503ResponseBodyApplicationJson = ErrorResponse


@dataclass
class ApiResponseFor503(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor503ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_503 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor503,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor503ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '401': _response_for_401,
    '403': _response_for_403,
    '500': _response_for_500,
    '503': _response_for_503,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _create_deploy_configuration_oapg(
        self: api_client.Api,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
        CreateDeployConfiguration
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_config_id,
            request_query_comment,
            request_query_device_type,
            request_query_sensor_loader_version_number,
            request_query_sensor_version_number,
            request_query_model_id,
            request_query_model_version_number,
            request_query_color_matrix_mode,
            request_query_color_matrix_file_name,
            request_query_gamma_mode,
            request_query_gamma_file_name,
            request_query_lscisp_mode,
            request_query_lscisp_file_name,
            request_query_lscraw_mode,
            request_query_lscraw_file_name,
            request_query_prewb_mode,
            request_query_prewb_file_name,
            request_query_dewarp_mode,
            request_query_dewarp_file_name,
            request_query_ap_fw_version_number,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='post'.upper(),
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class CreateDeployConfiguration(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def create_deploy_configuration(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._create_deploy_configuration_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def post(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._create_deploy_configuration_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


