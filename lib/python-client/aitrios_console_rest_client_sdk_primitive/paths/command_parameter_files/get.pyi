# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from aitrios_console_rest_client_sdk_primitive import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aitrios_console_rest_client_sdk_primitive import schemas  # noqa: F401

from aitrios_console_rest_client_sdk_primitive.model.error_response import ErrorResponse



class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "parameter_list",
        }
        
        class properties:
            
            
            class parameter_list(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "ins_date",
                                "upd_id",
                                "upd_date",
                                "file_name",
                                "parameter",
                                "isdefault",
                                "ins_id",
                            }
                            
                            class properties:
                                
                                
                                class parameter(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "commands",
                                        }
                                        
                                        class properties:
                                            
                                            
                                            class commands(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            required = {
                                                                "command_name",
                                                                "parameters",
                                                            }
                                                            
                                                            class properties:
                                                                command_name = schemas.StrSchema
                                                                
                                                                
                                                                class parameters(
                                                                    schemas.DictSchema
                                                                ):
                                                                
                                                                
                                                                    class MetaOapg:
                                                                        
                                                                        class properties:
                                                                            Mode = schemas.IntSchema
                                                                            UploadMethod = schemas.StrSchema
                                                                            FileFormat = schemas.StrSchema
                                                                            UploadMethodIR = schemas.StrSchema
                                                                            CropHOffset = schemas.IntSchema
                                                                            CropVOffset = schemas.IntSchema
                                                                            CropHSize = schemas.IntSchema
                                                                            CropVSize = schemas.IntSchema
                                                                            NumberOfImages = schemas.IntSchema
                                                                            UploadInterval = schemas.IntSchema
                                                                            NumberOfInferencesPerMessage = schemas.IntSchema
                                                                            MaxDetectionsPerFrame = schemas.IntSchema
                                                                            ModelId = schemas.StrSchema
                                                                            PPLParameter = schemas.DictSchema
                                                                            __annotations__ = {
                                                                                "Mode": Mode,
                                                                                "UploadMethod": UploadMethod,
                                                                                "FileFormat": FileFormat,
                                                                                "UploadMethodIR": UploadMethodIR,
                                                                                "CropHOffset": CropHOffset,
                                                                                "CropVOffset": CropVOffset,
                                                                                "CropHSize": CropHSize,
                                                                                "CropVSize": CropVSize,
                                                                                "NumberOfImages": NumberOfImages,
                                                                                "UploadInterval": UploadInterval,
                                                                                "NumberOfInferencesPerMessage": NumberOfInferencesPerMessage,
                                                                                "MaxDetectionsPerFrame": MaxDetectionsPerFrame,
                                                                                "ModelId": ModelId,
                                                                                "PPLParameter": PPLParameter,
                                                                            }
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["Mode"]) -> MetaOapg.properties.Mode: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["UploadMethod"]) -> MetaOapg.properties.UploadMethod: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["FileFormat"]) -> MetaOapg.properties.FileFormat: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["UploadMethodIR"]) -> MetaOapg.properties.UploadMethodIR: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["CropHOffset"]) -> MetaOapg.properties.CropHOffset: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["CropVOffset"]) -> MetaOapg.properties.CropVOffset: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["CropHSize"]) -> MetaOapg.properties.CropHSize: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["CropVSize"]) -> MetaOapg.properties.CropVSize: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["NumberOfImages"]) -> MetaOapg.properties.NumberOfImages: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["UploadInterval"]) -> MetaOapg.properties.UploadInterval: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["NumberOfInferencesPerMessage"]) -> MetaOapg.properties.NumberOfInferencesPerMessage: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["MaxDetectionsPerFrame"]) -> MetaOapg.properties.MaxDetectionsPerFrame: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["ModelId"]) -> MetaOapg.properties.ModelId: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: typing_extensions.Literal["PPLParameter"]) -> MetaOapg.properties.PPLParameter: ...
                                                                    
                                                                    @typing.overload
                                                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                                    
                                                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Mode", "UploadMethod", "FileFormat", "UploadMethodIR", "CropHOffset", "CropVOffset", "CropHSize", "CropVSize", "NumberOfImages", "UploadInterval", "NumberOfInferencesPerMessage", "MaxDetectionsPerFrame", "ModelId", "PPLParameter", ], str]):
                                                                        # dict_instance[name] accessor
                                                                        return super().__getitem__(name)
                                                                    
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["Mode"]) -> typing.Union[MetaOapg.properties.Mode, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["UploadMethod"]) -> typing.Union[MetaOapg.properties.UploadMethod, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["FileFormat"]) -> typing.Union[MetaOapg.properties.FileFormat, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["UploadMethodIR"]) -> typing.Union[MetaOapg.properties.UploadMethodIR, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["CropHOffset"]) -> typing.Union[MetaOapg.properties.CropHOffset, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["CropVOffset"]) -> typing.Union[MetaOapg.properties.CropVOffset, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["CropHSize"]) -> typing.Union[MetaOapg.properties.CropHSize, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["CropVSize"]) -> typing.Union[MetaOapg.properties.CropVSize, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["NumberOfImages"]) -> typing.Union[MetaOapg.properties.NumberOfImages, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["UploadInterval"]) -> typing.Union[MetaOapg.properties.UploadInterval, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["NumberOfInferencesPerMessage"]) -> typing.Union[MetaOapg.properties.NumberOfInferencesPerMessage, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["MaxDetectionsPerFrame"]) -> typing.Union[MetaOapg.properties.MaxDetectionsPerFrame, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["ModelId"]) -> typing.Union[MetaOapg.properties.ModelId, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: typing_extensions.Literal["PPLParameter"]) -> typing.Union[MetaOapg.properties.PPLParameter, schemas.Unset]: ...
                                                                    
                                                                    @typing.overload
                                                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                                    
                                                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Mode", "UploadMethod", "FileFormat", "UploadMethodIR", "CropHOffset", "CropVOffset", "CropHSize", "CropVSize", "NumberOfImages", "UploadInterval", "NumberOfInferencesPerMessage", "MaxDetectionsPerFrame", "ModelId", "PPLParameter", ], str]):
                                                                        return super().get_item_oapg(name)
                                                                    
                                                                
                                                                    def __new__(
                                                                        cls,
                                                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                                                        Mode: typing.Union[MetaOapg.properties.Mode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                                        UploadMethod: typing.Union[MetaOapg.properties.UploadMethod, str, schemas.Unset] = schemas.unset,
                                                                        FileFormat: typing.Union[MetaOapg.properties.FileFormat, str, schemas.Unset] = schemas.unset,
                                                                        UploadMethodIR: typing.Union[MetaOapg.properties.UploadMethodIR, str, schemas.Unset] = schemas.unset,
                                                                        CropHOffset: typing.Union[MetaOapg.properties.CropHOffset, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                                        CropVOffset: typing.Union[MetaOapg.properties.CropVOffset, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                                        CropHSize: typing.Union[MetaOapg.properties.CropHSize, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                                        CropVSize: typing.Union[MetaOapg.properties.CropVSize, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                                        NumberOfImages: typing.Union[MetaOapg.properties.NumberOfImages, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                                        UploadInterval: typing.Union[MetaOapg.properties.UploadInterval, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                                        NumberOfInferencesPerMessage: typing.Union[MetaOapg.properties.NumberOfInferencesPerMessage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                                        MaxDetectionsPerFrame: typing.Union[MetaOapg.properties.MaxDetectionsPerFrame, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                                                        ModelId: typing.Union[MetaOapg.properties.ModelId, str, schemas.Unset] = schemas.unset,
                                                                        PPLParameter: typing.Union[MetaOapg.properties.PPLParameter, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                                    ) -> 'parameters':
                                                                        return super().__new__(
                                                                            cls,
                                                                            *args,
                                                                            Mode=Mode,
                                                                            UploadMethod=UploadMethod,
                                                                            FileFormat=FileFormat,
                                                                            UploadMethodIR=UploadMethodIR,
                                                                            CropHOffset=CropHOffset,
                                                                            CropVOffset=CropVOffset,
                                                                            CropHSize=CropHSize,
                                                                            CropVSize=CropVSize,
                                                                            NumberOfImages=NumberOfImages,
                                                                            UploadInterval=UploadInterval,
                                                                            NumberOfInferencesPerMessage=NumberOfInferencesPerMessage,
                                                                            MaxDetectionsPerFrame=MaxDetectionsPerFrame,
                                                                            ModelId=ModelId,
                                                                            PPLParameter=PPLParameter,
                                                                            _configuration=_configuration,
                                                                            **kwargs,
                                                                        )
                                                                __annotations__ = {
                                                                    "command_name": command_name,
                                                                    "parameters": parameters,
                                                                }
                                                        
                                                        command_name: MetaOapg.properties.command_name
                                                        parameters: MetaOapg.properties.parameters
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["command_name"]) -> MetaOapg.properties.command_name: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["parameters"]) -> MetaOapg.properties.parameters: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["command_name", "parameters", ], str]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["command_name"]) -> MetaOapg.properties.command_name: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["parameters"]) -> MetaOapg.properties.parameters: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["command_name", "parameters", ], str]):
                                                            return super().get_item_oapg(name)
                                                        
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            command_name: typing.Union[MetaOapg.properties.command_name, str, ],
                                                            parameters: typing.Union[MetaOapg.properties.parameters, dict, frozendict.frozendict, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                command_name=command_name,
                                                                parameters=parameters,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'commands':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            __annotations__ = {
                                                "commands": commands,
                                            }
                                    
                                    commands: MetaOapg.properties.commands
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["commands"]) -> MetaOapg.properties.commands: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["commands", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["commands"]) -> MetaOapg.properties.commands: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["commands", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        commands: typing.Union[MetaOapg.properties.commands, list, tuple, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'parameter':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            commands=commands,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                file_name = schemas.StrSchema
                                comment = schemas.StrSchema
                                isdefault = schemas.StrSchema
                                
                                
                                class device_ids(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'device_ids':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                ins_id = schemas.StrSchema
                                ins_date = schemas.StrSchema
                                upd_id = schemas.StrSchema
                                upd_date = schemas.StrSchema
                                __annotations__ = {
                                    "parameter": parameter,
                                    "file_name": file_name,
                                    "comment": comment,
                                    "isdefault": isdefault,
                                    "device_ids": device_ids,
                                    "ins_id": ins_id,
                                    "ins_date": ins_date,
                                    "upd_id": upd_id,
                                    "upd_date": upd_date,
                                }
                        
                        ins_date: MetaOapg.properties.ins_date
                        upd_id: MetaOapg.properties.upd_id
                        upd_date: MetaOapg.properties.upd_date
                        file_name: MetaOapg.properties.file_name
                        parameter: MetaOapg.properties.parameter
                        isdefault: MetaOapg.properties.isdefault
                        ins_id: MetaOapg.properties.ins_id
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["parameter"]) -> MetaOapg.properties.parameter: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["file_name"]) -> MetaOapg.properties.file_name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isdefault"]) -> MetaOapg.properties.isdefault: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["device_ids"]) -> MetaOapg.properties.device_ids: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ins_id"]) -> MetaOapg.properties.ins_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ins_date"]) -> MetaOapg.properties.ins_date: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["upd_id"]) -> MetaOapg.properties.upd_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["upd_date"]) -> MetaOapg.properties.upd_date: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["parameter", "file_name", "comment", "isdefault", "device_ids", "ins_id", "ins_date", "upd_id", "upd_date", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["parameter"]) -> MetaOapg.properties.parameter: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["file_name"]) -> MetaOapg.properties.file_name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isdefault"]) -> MetaOapg.properties.isdefault: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["device_ids"]) -> typing.Union[MetaOapg.properties.device_ids, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ins_id"]) -> MetaOapg.properties.ins_id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ins_date"]) -> MetaOapg.properties.ins_date: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["upd_id"]) -> MetaOapg.properties.upd_id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["upd_date"]) -> MetaOapg.properties.upd_date: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["parameter", "file_name", "comment", "isdefault", "device_ids", "ins_id", "ins_date", "upd_id", "upd_date", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            ins_date: typing.Union[MetaOapg.properties.ins_date, str, ],
                            upd_id: typing.Union[MetaOapg.properties.upd_id, str, ],
                            upd_date: typing.Union[MetaOapg.properties.upd_date, str, ],
                            file_name: typing.Union[MetaOapg.properties.file_name, str, ],
                            parameter: typing.Union[MetaOapg.properties.parameter, dict, frozendict.frozendict, ],
                            isdefault: typing.Union[MetaOapg.properties.isdefault, str, ],
                            ins_id: typing.Union[MetaOapg.properties.ins_id, str, ],
                            comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
                            device_ids: typing.Union[MetaOapg.properties.device_ids, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                ins_date=ins_date,
                                upd_id=upd_id,
                                upd_date=upd_date,
                                file_name=file_name,
                                parameter=parameter,
                                isdefault=isdefault,
                                ins_id=ins_id,
                                comment=comment,
                                device_ids=device_ids,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'parameter_list':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "parameter_list": parameter_list,
            }
    
    parameter_list: MetaOapg.properties.parameter_list
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parameter_list"]) -> MetaOapg.properties.parameter_list: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["parameter_list", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parameter_list"]) -> MetaOapg.properties.parameter_list: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["parameter_list", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        parameter_list: typing.Union[MetaOapg.properties.parameter_list, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            parameter_list=parameter_list,
            _configuration=_configuration,
            **kwargs,
        )
SchemaFor401ResponseBodyApplicationJson = ErrorResponse
SchemaFor403ResponseBodyApplicationJson = ErrorResponse
SchemaFor500ResponseBodyApplicationJson = ErrorResponse
SchemaFor503ResponseBodyApplicationJson = ErrorResponse
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _get_command_parameter_oapg(
        self: api_client.Api,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
        GetCommandParameter
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class GetCommandParameter(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def get_command_parameter(
        self: BaseApi,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._get_command_parameter_oapg(
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def get(
        self: BaseApi,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._get_command_parameter_oapg(
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


