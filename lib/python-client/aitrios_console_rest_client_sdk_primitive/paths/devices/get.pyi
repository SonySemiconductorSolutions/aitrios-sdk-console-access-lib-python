# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from aitrios_console_rest_client_sdk_primitive import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from aitrios_console_rest_client_sdk_primitive import schemas  # noqa: F401

from aitrios_console_rest_client_sdk_primitive.model.error_response import ErrorResponse

# query params
ConnectionStateSchema = schemas.StrSchema
DeviceNameSchema = schemas.StrSchema
DeviceIdSchema = schemas.StrSchema
DeviceGroupIdSchema = schemas.StrSchema


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "devices",
        }
        
        class properties:
            
            
            class devices(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "ins_date",
                                "upd_id",
                                "device_id",
                                "upd_date",
                                "connectionState",
                                "ins_id",
                                "lastActivityTime",
                            }
                            
                            class properties:
                                device_id = schemas.StrSchema
                                place = schemas.StrSchema
                                comment = schemas.StrSchema
                                
                                
                                class _property(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "device_name",
                                            "internal_device_id",
                                        }
                                        
                                        class properties:
                                            device_name = schemas.StrSchema
                                            internal_device_id = schemas.StrSchema
                                            __annotations__ = {
                                                "device_name": device_name,
                                                "internal_device_id": internal_device_id,
                                            }
                                    
                                    device_name: MetaOapg.properties.device_name
                                    internal_device_id: MetaOapg.properties.internal_device_id
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["device_name"]) -> MetaOapg.properties.device_name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["internal_device_id"]) -> MetaOapg.properties.internal_device_id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["device_name", "internal_device_id", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["device_name"]) -> MetaOapg.properties.device_name: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["internal_device_id"]) -> MetaOapg.properties.internal_device_id: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["device_name", "internal_device_id", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        device_name: typing.Union[MetaOapg.properties.device_name, str, ],
                                        internal_device_id: typing.Union[MetaOapg.properties.internal_device_id, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> '_property':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            device_name=device_name,
                                            internal_device_id=internal_device_id,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                ins_id = schemas.StrSchema
                                ins_date = schemas.StrSchema
                                upd_id = schemas.StrSchema
                                upd_date = schemas.StrSchema
                                connectionState = schemas.StrSchema
                                lastActivityTime = schemas.StrSchema
                                
                                
                                class models(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                class properties:
                                                    model_version_id = schemas.StrSchema
                                                    __annotations__ = {
                                                        "model_version_id": model_version_id,
                                                    }
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["model_version_id"]) -> MetaOapg.properties.model_version_id: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["model_version_id", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["model_version_id"]) -> typing.Union[MetaOapg.properties.model_version_id, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["model_version_id", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                model_version_id: typing.Union[MetaOapg.properties.model_version_id, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    model_version_id=model_version_id,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'models':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class device_groups(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                required = {
                                                    "ins_date",
                                                    "upd_id",
                                                    "device_group_id",
                                                    "upd_date",
                                                    "device_type",
                                                    "ins_id",
                                                }
                                                
                                                class properties:
                                                    device_group_id = schemas.StrSchema
                                                    device_type = schemas.StrSchema
                                                    comment = schemas.StrSchema
                                                    ins_id = schemas.StrSchema
                                                    ins_date = schemas.StrSchema
                                                    upd_id = schemas.StrSchema
                                                    upd_date = schemas.StrSchema
                                                    __annotations__ = {
                                                        "device_group_id": device_group_id,
                                                        "device_type": device_type,
                                                        "comment": comment,
                                                        "ins_id": ins_id,
                                                        "ins_date": ins_date,
                                                        "upd_id": upd_id,
                                                        "upd_date": upd_date,
                                                    }
                                            
                                            ins_date: MetaOapg.properties.ins_date
                                            upd_id: MetaOapg.properties.upd_id
                                            device_group_id: MetaOapg.properties.device_group_id
                                            upd_date: MetaOapg.properties.upd_date
                                            device_type: MetaOapg.properties.device_type
                                            ins_id: MetaOapg.properties.ins_id
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["device_group_id"]) -> MetaOapg.properties.device_group_id: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["device_type"]) -> MetaOapg.properties.device_type: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["ins_id"]) -> MetaOapg.properties.ins_id: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["ins_date"]) -> MetaOapg.properties.ins_date: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["upd_id"]) -> MetaOapg.properties.upd_id: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["upd_date"]) -> MetaOapg.properties.upd_date: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["device_group_id", "device_type", "comment", "ins_id", "ins_date", "upd_id", "upd_date", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["device_group_id"]) -> MetaOapg.properties.device_group_id: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["device_type"]) -> MetaOapg.properties.device_type: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["ins_id"]) -> MetaOapg.properties.ins_id: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["ins_date"]) -> MetaOapg.properties.ins_date: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["upd_id"]) -> MetaOapg.properties.upd_id: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["upd_date"]) -> MetaOapg.properties.upd_date: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["device_group_id", "device_type", "comment", "ins_id", "ins_date", "upd_id", "upd_date", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                ins_date: typing.Union[MetaOapg.properties.ins_date, str, ],
                                                upd_id: typing.Union[MetaOapg.properties.upd_id, str, ],
                                                device_group_id: typing.Union[MetaOapg.properties.device_group_id, str, ],
                                                upd_date: typing.Union[MetaOapg.properties.upd_date, str, ],
                                                device_type: typing.Union[MetaOapg.properties.device_type, str, ],
                                                ins_id: typing.Union[MetaOapg.properties.ins_id, str, ],
                                                comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    ins_date=ins_date,
                                                    upd_id=upd_id,
                                                    device_group_id=device_group_id,
                                                    upd_date=upd_date,
                                                    device_type=device_type,
                                                    ins_id=ins_id,
                                                    comment=comment,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'device_groups':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "device_id": device_id,
                                    "place": place,
                                    "comment": comment,
                                    "property": _property,
                                    "ins_id": ins_id,
                                    "ins_date": ins_date,
                                    "upd_id": upd_id,
                                    "upd_date": upd_date,
                                    "connectionState": connectionState,
                                    "lastActivityTime": lastActivityTime,
                                    "models": models,
                                    "device_groups": device_groups,
                                }
                        
                        ins_date: MetaOapg.properties.ins_date
                        upd_id: MetaOapg.properties.upd_id
                        device_id: MetaOapg.properties.device_id
                        upd_date: MetaOapg.properties.upd_date
                        connectionState: MetaOapg.properties.connectionState
                        ins_id: MetaOapg.properties.ins_id
                        lastActivityTime: MetaOapg.properties.lastActivityTime
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["place"]) -> MetaOapg.properties.place: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["property"]) -> MetaOapg.properties._property: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ins_id"]) -> MetaOapg.properties.ins_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ins_date"]) -> MetaOapg.properties.ins_date: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["upd_id"]) -> MetaOapg.properties.upd_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["upd_date"]) -> MetaOapg.properties.upd_date: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["connectionState"]) -> MetaOapg.properties.connectionState: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["lastActivityTime"]) -> MetaOapg.properties.lastActivityTime: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["models"]) -> MetaOapg.properties.models: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["device_groups"]) -> MetaOapg.properties.device_groups: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["device_id", "place", "comment", "property", "ins_id", "ins_date", "upd_id", "upd_date", "connectionState", "lastActivityTime", "models", "device_groups", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["place"]) -> typing.Union[MetaOapg.properties.place, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["property"]) -> typing.Union[MetaOapg.properties._property, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ins_id"]) -> MetaOapg.properties.ins_id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ins_date"]) -> MetaOapg.properties.ins_date: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["upd_id"]) -> MetaOapg.properties.upd_id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["upd_date"]) -> MetaOapg.properties.upd_date: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["connectionState"]) -> MetaOapg.properties.connectionState: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["lastActivityTime"]) -> MetaOapg.properties.lastActivityTime: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["models"]) -> typing.Union[MetaOapg.properties.models, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["device_groups"]) -> typing.Union[MetaOapg.properties.device_groups, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["device_id", "place", "comment", "property", "ins_id", "ins_date", "upd_id", "upd_date", "connectionState", "lastActivityTime", "models", "device_groups", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            ins_date: typing.Union[MetaOapg.properties.ins_date, str, ],
                            upd_id: typing.Union[MetaOapg.properties.upd_id, str, ],
                            device_id: typing.Union[MetaOapg.properties.device_id, str, ],
                            upd_date: typing.Union[MetaOapg.properties.upd_date, str, ],
                            connectionState: typing.Union[MetaOapg.properties.connectionState, str, ],
                            ins_id: typing.Union[MetaOapg.properties.ins_id, str, ],
                            lastActivityTime: typing.Union[MetaOapg.properties.lastActivityTime, str, ],
                            place: typing.Union[MetaOapg.properties.place, str, schemas.Unset] = schemas.unset,
                            comment: typing.Union[MetaOapg.properties.comment, str, schemas.Unset] = schemas.unset,
                            models: typing.Union[MetaOapg.properties.models, list, tuple, schemas.Unset] = schemas.unset,
                            device_groups: typing.Union[MetaOapg.properties.device_groups, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                ins_date=ins_date,
                                upd_id=upd_id,
                                device_id=device_id,
                                upd_date=upd_date,
                                connectionState=connectionState,
                                ins_id=ins_id,
                                lastActivityTime=lastActivityTime,
                                place=place,
                                comment=comment,
                                models=models,
                                device_groups=device_groups,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'devices':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "devices": devices,
            }
    
    devices: MetaOapg.properties.devices
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["devices"]) -> MetaOapg.properties.devices: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["devices", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["devices"]) -> MetaOapg.properties.devices: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["devices", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        devices: typing.Union[MetaOapg.properties.devices, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            devices=devices,
            _configuration=_configuration,
            **kwargs,
        )
SchemaFor400ResponseBodyApplicationJson = ErrorResponse
SchemaFor401ResponseBodyApplicationJson = ErrorResponse
SchemaFor403ResponseBodyApplicationJson = ErrorResponse
SchemaFor500ResponseBodyApplicationJson = ErrorResponse
SchemaFor503ResponseBodyApplicationJson = ErrorResponse
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _get_devices_oapg(
        self: api_client.Api,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
        GetDevices
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_connection_state,
            request_query_device_name,
            request_query_device_id,
            request_query_device_group_id,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class GetDevices(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    def get_devices(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._get_devices_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    def get(
        self: BaseApi,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization
    ]:
        return self._get_devices_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


