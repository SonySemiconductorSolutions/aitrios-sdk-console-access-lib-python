"""
    Console API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 3.0.2
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from aitrios_console_rest_client_sdk_primitive.api_client import ApiClient, Endpoint as _Endpoint
from aitrios_console_rest_client_sdk_primitive.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from aitrios_console_rest_client_sdk_primitive.model.get_image_directories200_response_inner import GetImageDirectories200ResponseInner
from aitrios_console_rest_client_sdk_primitive.model.get_images200_response import GetImages200Response
from aitrios_console_rest_client_sdk_primitive.model.get_inferenceresults200_response_inner import GetInferenceresults200ResponseInner


class InsightApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_image_directories_endpoint = _Endpoint(
            settings={
                'response_type': ([GetImageDirectories200ResponseInner],),
                'auth': [],
                'endpoint_path': '/api/v1/devices/images/directories',
                'operation_id': 'get_image_directories',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'device_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'device_id':
                        (str,),
                },
                'attribute_map': {
                    'device_id': 'device_id',
                },
                'location_map': {
                    'device_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_images_endpoint = _Endpoint(
            settings={
                'response_type': (GetImages200Response,),
                'auth': [],
                'endpoint_path': '/api/v1/devices/{device_id}/images/directories/{sub_directory_name}',
                'operation_id': 'get_images',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'device_id',
                    'sub_directory_name',
                    'order_by',
                    'number_of_images',
                    'skip',
                ],
                'required': [
                    'device_id',
                    'sub_directory_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'device_id':
                        (str,),
                    'sub_directory_name':
                        (str,),
                    'order_by':
                        (str,),
                    'number_of_images':
                        (int,),
                    'skip':
                        (int,),
                },
                'attribute_map': {
                    'device_id': 'device_id',
                    'sub_directory_name': 'sub_directory_name',
                    'order_by': 'order_by',
                    'number_of_images': 'number_of_images',
                    'skip': 'skip',
                },
                'location_map': {
                    'device_id': 'path',
                    'sub_directory_name': 'path',
                    'order_by': 'query',
                    'number_of_images': 'query',
                    'skip': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_inferenceresults_endpoint = _Endpoint(
            settings={
                'response_type': ([GetInferenceresults200ResponseInner],),
                'auth': [],
                'endpoint_path': '/api/v1/devices/{device_id}/inferenceresults',
                'operation_id': 'get_inferenceresults',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'device_id',
                    'number_of_inferenceresults',
                    'filter',
                    'raw',
                    'time',
                ],
                'required': [
                    'device_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'device_id':
                        (str,),
                    'number_of_inferenceresults':
                        (int,),
                    'filter':
                        (str,),
                    'raw':
                        (str,),
                    'time':
                        (str,),
                },
                'attribute_map': {
                    'device_id': 'device_id',
                    'number_of_inferenceresults': 'NumberOfInferenceresults',
                    'filter': 'filter',
                    'raw': 'raw',
                    'time': 'time',
                },
                'location_map': {
                    'device_id': 'path',
                    'number_of_inferenceresults': 'query',
                    'filter': 'query',
                    'raw': 'query',
                    'time': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_image_directories(
        self,
        **kwargs
    ):
        """GetImageDirectories  # noqa: E501

        Get image directories function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of get_image_directories api.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_image_directories(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            device_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetImageDirectories200ResponseInner]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_image_directories_endpoint.call_with_http_info(**kwargs)

    def get_images(
        self,
        device_id,
        sub_directory_name,
        **kwargs
    ):
        """GetImages  # noqa: E501

        Get_images function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of get_images api.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_images(device_id, sub_directory_name, async_req=True)
        >>> result = thread.get()

        Args:
            device_id (str):
            sub_directory_name (str):

        Keyword Args:
            order_by (str): [optional] if omitted the server will use the default value of "ASC"
            number_of_images (int): [optional] if omitted the server will use the default value of 50
            skip (int): [optional] if omitted the server will use the default value of 0
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetImages200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['device_id'] = \
            device_id
        kwargs['sub_directory_name'] = \
            sub_directory_name
        return self.get_images_endpoint.call_with_http_info(**kwargs)

    def get_inferenceresults(
        self,
        device_id,
        **kwargs
    ):
        """GetInferenceresults  # noqa: E501

        Get inference results function.  Parameters: ---------- request(Request): Request from fastapi. session(Any): The result of calling Depends(get_db).  Returns: ------- ret(object): The result of calling main method of get_inference_results api.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_inferenceresults(device_id, async_req=True)
        >>> result = thread.get()

        Args:
            device_id (str):

        Keyword Args:
            number_of_inferenceresults (int): [optional] if omitted the server will use the default value of 20
            filter (str): [optional]
            raw (str): [optional] if omitted the server will use the default value of "0"
            time (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetInferenceresults200ResponseInner]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['device_id'] = \
            device_id
        return self.get_inferenceresults_endpoint.call_with_http_info(**kwargs)

